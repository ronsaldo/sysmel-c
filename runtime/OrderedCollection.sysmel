public: [
Record: OrderedCollection withFields: #{
    size: Integer.
    capacity: Integer.
    data: Array.
}.
].
OrderedCollection
    withSelector: #increaseCapacity addMethod: {
        |$(OrderedCollection)self :: OrderedCollection|

        $newCapacity := self capacity * 2.
        $newDataStore := Array new: newCapacity.
        $oldData := self data.
        $oldDataSize := self size.
        $!i := 0. while: (i < oldDataSize) do: {
            newDataStore at: i put: (oldData at: i)
        } continueWith: (i := i + 1).

        self capacity: newCapacity.
        self data: newDataStore.
        return: self
    };
    withSelector: #ensureCapacity addMethod: {
        | $(OrderedCollection)self :: OrderedCollection |
        if: self data isNull then: {
            self size: 0.
            self capacity: 32.
            self data: (Array new: self capacity).
        }.
        return: self.
    };
    withSelector: #add: addMethod: {
        | $(OrderedCollection)self $(Gradual)element :: Gradual |
        self ensureCapacity.
        if: self size >= self capacity then: {
            self increaseCapacity
        }.
        self data at: self size put: element.
        self size: self size + 1.
        return: element
    };
    withSelector: #at: addMethod: {
        | $(OrderedCollection)self $(Integer)index :: Gradual |
        if: index >= self size then: {
            printLine("Index out of bounds").
            abort()
        }.

        self data at: index. 
    };
    withSelector: #at:put: addMethod: {
        | $(OrderedCollection)self $(Integer)index $(Gradual)value :: Gradual |
        if: index >= self size then: {
            printLine("Index out of bounds").
            abort()
        }.

        self data at: index put: value.
        value
    };
    withSelector: #asArray addMethod: {
        | $(OrderedCollection)self :: Array |
        $size := self size.
        $result := Array new: size.
        #*!i := 0. while: (i < size) do: {
            ##result at: i put: (self data at: i) 
        } continueWith(i := i + 1).*#
        result
    }.

$list := OrderedCollection().
list ensureCapacity.
list add: 1; add: 2; add: 3.
printLine(list asArray)
