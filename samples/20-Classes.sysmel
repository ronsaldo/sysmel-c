Class: Arithmetic withFields: #{
    multiplier: Integer
}.

Class: LiteralInteger withSuperclass: Arithmetic fields: #{
    value: Integer
}.

Class: Plus withSuperclass: Arithmetic fields: #{
    leftOperand: Arithmetic. rightOperand: Arithmetic.
}.

Class: Minus withSuperclass: Arithmetic fields: #{
    leftOperand: Arithmetic. rightOperand: Arithmetic.
}.

$sumExpression := Minus(2. Plus(10. LiteralInteger(1. 42). LiteralInteger(1. 5)) . LiteralInteger(1. 7)).
printLine(sumExpression).

Arithmetic
    withSelector: #evaluate addMethod: {
        |$(Arithmetic)self :: Integer|
        printLine("subclassResponsibility").
        abort().
    }.
LiteralInteger
    withSelector: #evaluate addMethod: {
        |$(LiteralInteger)self :: Integer|
        self value * self multiplier
    }.
Plus
    withSelector: #evaluate addMethod: {
        |$(Plus)self :: Integer|
        (self leftOperand evaluate + self rightOperand evaluate) * self multiplier
    }.
Minus
    withSelector: #evaluate addMethod: {
        |$(Plus)self :: Integer|
        (self leftOperand evaluate - self rightOperand evaluate) * self multiplier
    }.
printLine(sumExpression evaluate).