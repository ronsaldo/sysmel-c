namespace: SysmelC definition: {
Namespace
    withSelector: #getOrCreateChildNamespaceNamed: addMethod: {
        |$(Namespace)self $(Symbol) childName|
        if: (self exportedObjectTable includesKey: childName) then: {
            return: extractNamespaceFromValue((self exportedObjectTable at: childName) value)
        } else: {
            $newChild := MakeNamespaceNamed(childName).
            $typedValue := TypedValue(Value(NamespaceValue(newChild)). getBasicIntrinsicTypes() namespace).
            self exportedObjectTable at: childName put: typedValue.
            self exportedObjectList add: typedValue.
            return: newChild
        }.
    };
    withSelector: #exportTypedValue:withName: addMethod: {
        |$(Namespace)self $(TypedValue)valueToExport $(Symbol) childName|
            self exportedObjectTable at: childName put: valueToExport.
            self exportedObjectList add: valueToExport.
            return: valueToExport
    };
    withSelector: #containsObjectSymbol: addMethod: {
        |$(Namespace)self $(Symbol)symbol :: Boolean |
            return: (self exportedObjectTable includesKey: symbol)
    };
    withSelector: #getObjectWithSymbol: addMethod: {
        |$(Namespace)self $(Symbol)symbol :: Gradual |
            return: (self exportedObjectTable at: symbol)
    };
    withSelector: #findExportedObjectSetInModule: addMethod: {
        |$(Namespace)self $(Module)module :: Void |
        $!i := 0. while: (i < self exportedObjectList size) do: {
            $namespaceExportedObject := self exportedObjectList at: i.
            module addExportedObject: namespaceExportedObject.
        } continueWith: (i := i + 1).
        void
    }.
}
