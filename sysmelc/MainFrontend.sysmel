namespace: SysmelC definition: {
public: [
    $printHelp( :: Void) := {
        printLine("sysmelc [options] <input files>.")
    }.
    $printVersion( :: Void) := {
        printLine("sysmelc v0.1")
    }.

    $evaluateSourceCode($(Module)module $(SourceCode)sourceCode :: Void) := {
        $tokens := scanSourceCode(sourceCode).
        $ast := parseTokenList(sourceCode . tokens).
        $environment := module createTopLevelScriptEnvironment.
        SemanticsState()
            analyzeAndEvaluateWithEnvironment: environment script: ast.
        void
    }.

    $evaluateFileContents($(Module)module $(String)fileName $(String)fileContents :: Void) := {
        $sourceCode := SourceCode#{
            directory: extractDirname(fileName).
            name: extractBasename(fileName).
            text: fileContents.
        }.
        evaluateSourceCode(module. sourceCode).
        void
    }.

    $MainFrontEnd($(Array)arguments :: Int32) := {
        $!argumentIndex := 1.
        $argumentCount := arguments size.
        $module := MakeModuleWithName(#CLI).
        while: argumentIndex < argumentCount do: {
            $argumentValue := arguments at: argumentIndex.
            if: (argumentValue at: 0) = '-' then: {
                if: argumentValue = "-h" then: {
                    printHelp().
                    return: 0i32
                }.
                if: argumentValue = "-v" then: {
                    printVersion().
                    return: 0i32
                }
            }
            else: {
                $fileContents := readWholeFileAsText(argumentValue).
                evaluateFileContents(module. argumentValue. fileContents).
            }
        } continueWith: (argumentIndex := argumentIndex + 1).
        0i32
    }.
].

setMainEntryPoint: MainFrontEnd.

$primitive_loadFileOnce($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $filenameValue := (context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 0)) value.
    $filenameString := match: filenameValue ofType: Value withPatterns: #{
        $(StringValue)string : string value.
        _: {
            printLine("Unsupported file name value ". filenameValue)
        }
    }.
    $localSourceDirectory := context sourcePosition sourceCode directory.
    ## TODO: Support absolute names.
    $filenameToLoad := localSourceDirectory -- filenameString.
    $fileContents := readWholeFileAsText(filenameToLoad).
    $module := context environment lookupModule.
    ##printLine("module". module).
    ##printLine("fileContents: ". fileContents).

    evaluateFileContents(module. filenameToLoad. fileContents).
    TypedValue(Value(VoidValue()). getBasicIntrinsicTypes() voidType)
}.

addGlobalMacroIntrinsicMethod(#loadFileOnce:. primitive_loadFileOnce.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . getBasicIntrinsicTypes() array].
        resultType: ParseTreeNode.
    })
).
}
