namespace: SysmelC definition: {
public: [
    Record: SourceCode withFields: #{
        directory: String.
        name: String.
        text: String.
    }.

    Record: SourcePosition withFields: #{
        sourceCode: SourceCode.
        startIndex: Int32.
        endIndex: Int32.
        startLine: Int32.
        endLine: Int32.
        startColumn: Int32.
        endColumn: Int32.
    }.

    SourcePosition
        withSelector: #getText addMethod: {|$(SourcePosition)self :: String |
            self sourceCode text substringFrom: self startIndex until: self endIndex
        };
        withSelector: #to: addMethod: {|$(SourcePosition)self $(SourcePosition)target :: SourcePosition |
            SourcePosition#{
                sourceCode: self sourceCode.
                startIndex: self startIndex.
                endIndex: target endIndex.
                startLine: self startLine.
                endLine: target endLine.
                startColumn: self startColumn.
                endColumn: target endColumn.
            }
        };
        withSelector: #until: addMethod:{
        |$(SourcePosition)self $(SourcePosition)target :: SourcePosition |
            SourcePosition#{
                sourceCode: self sourceCode.
                startIndex: self startIndex.
                endIndex: target startIndex.
                startLine: self startLine.
                endLine: target startLine.
                startColumn: self startColumn.
                endColumn: target startColumn.
            }
        };
        withSelector: #printFormatted addMethod: {
        |$(SourcePosition)self :: Void |
            print(self sourceCode directory. self sourceCode name. ":".
                self startLine asInteger. ".". self startColumn asInteger. "-".
                self endLine asInteger. ".". self endColumn asInteger. ":")
        }.

$extractDirname($(String)string :: String) := {
    $!lastIndex := 0.
    $!i := 0.
    while: i < string size do: {
        $c := string at: i.
        if: (c = '/') || (c = '\\') then: {
            lastIndex := i
        }
    } continueWith: (i := i + 1).

    string substringFrom: 0 until: lastIndex + 1.
}.

$extractBasename($(String)string :: String) := {
    $!lastIndex := 0.
    $!i := 0.
    while: i < string size do: {
        $c := string at: i.
        if: (c = '/') || (c = '\\') then: {
            lastIndex := i
        }
    } continueWith: (i := i + 1).

    string substringFrom: lastIndex + 1 until: string size.
}.

$makeSourceCodeForString($(String)text :: SourceCode)
    := SourceCode#{
        name: "Text String".
        text: text.
    }.
].
}.
