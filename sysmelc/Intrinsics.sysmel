namespace: SysmelC definition: {
$DefaultIntrinsicsEnvironment := IntrinsicsEnvironment#{
    parent: Environment(EmptyEnvironment()).
    localSymbols: SymbolHashtable().
}.

public: [
    Record: BasicIntrinsicTypes withFields: #{
        null: SysmelType.
        voidType: SysmelType.
        boolean: SysmelType.
        integer: SysmelType.
        float: SysmelType.
        character: SysmelType.
        gradual: SysmelType.
        string: SysmelType.
        symbol: SysmelType.
        array: SysmelType.
        tuple: SysmelType.
        record: SysmelType.
        byteArray: SysmelType.
        association: SysmelType.
        immutableDictionary: SysmelType.
        parseTreeNode: SysmelType.
        function: SysmelType.
        universe: SysmelType.

        uint8:  SysmelType.
        uint16: SysmelType.
        uint32: SysmelType.
        uint64: SysmelType.

        int8:  SysmelType.
        int16: SysmelType.
        int32: SysmelType.
        int64: SysmelType.

        char8:  SysmelType.
        char16: SysmelType.
        char32: SysmelType.

        float32: SysmelType.
        float64: SysmelType.
    }
].

$BasicIntrinsicTypesSingleton := BasicIntrinsicTypes#{
    null: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Null.  isValueType: true. valueAlignment: 0u8. valueSize: 0u8. heapAlignment: 0u8. heapSize: 0u8. methodDict: SymbolHashtable().
    })).
    voidType: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Void.  isValueType: true. valueAlignment: 0u8. valueSize: 0u8. heapAlignment: 0u8. heapSize: 0u8. methodDict: SymbolHashtable().
    })).
    boolean: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Boolean. isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    integer: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Integer. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    float: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Float. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    character: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Character. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    string: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #String. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    symbol: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Symbol. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    array: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Array. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    tuple: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Tuple. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    record: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Record. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    parseTreeNode: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #ParseTreeNode. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    byteArray: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #ByteArray. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    association: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Association. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    immutableDictionary: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #ImmutableDictionary. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    function: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Function. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    universe: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #TypeUniverse. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    gradual: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Gradual. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).

    uint8: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt8.  printingSuffix: #u8.  isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    uint16: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt16. printingSuffix: #u16. isValueType: true. valueAlignment: 2u8. valueSize: 2u8. heapAlignment: 2u8. heapSize: 2u8. methodDict: SymbolHashtable().
    })).
    uint32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt32. printingSuffix: #u32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).
    uint64: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt64. printingSuffix: #u64. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).

    int8: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int8.  printingSuffix: #i8.  isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    int16: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int16. printingSuffix: #i16. isValueType: true. valueAlignment: 2u8. valueSize: 2u8. heapAlignment: 2u8. heapSize: 2u8. methodDict: SymbolHashtable().
    })).
    int32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int32. printingSuffix: #i32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).
    int64: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int64. printingSuffix: #i64. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).

    char8: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Char8.  printingSuffix: #c8.  isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    char16: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Char16. printingSuffix: #c16. isValueType: true. valueAlignment: 2u8. valueSize: 2u8. heapAlignment: 2u8. heapSize: 2u8. methodDict: SymbolHashtable().
    })).
    char32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Char32. printingSuffix: #c32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).

    float32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Float32. printingSuffix: #f32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).
    float64: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Float64. printingSuffix: #f64. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
}.

IntrinsicsEnvironment
    withSelector: #addType: addMethod: {
        |$(IntrinsicsEnvironment)self $(SysmelType)type :: Void |
        match: type ofType: SysmelType withPatterns: #{
            $(SysmelBasicType)basicType : {
                self localSymbols at: basicType common name put: TypedValue(Value(SysmelTypeValue(type)). BasicIntrinsicTypesSingleton universe)
            }.
            _: {
                printLine("Missing support for type ". type)
            }
        }.
        void
    }.
    

DefaultIntrinsicsEnvironment
    addType: BasicIntrinsicTypesSingleton null;
    addType: BasicIntrinsicTypesSingleton boolean;
    addType: BasicIntrinsicTypesSingleton integer;
    addType: BasicIntrinsicTypesSingleton character;
    addType: BasicIntrinsicTypesSingleton float;
    addType: BasicIntrinsicTypesSingleton string;
    addType: BasicIntrinsicTypesSingleton symbol;
    addType: BasicIntrinsicTypesSingleton array;
    addType: BasicIntrinsicTypesSingleton tuple;
    addType: BasicIntrinsicTypesSingleton byteArray;
    addType: BasicIntrinsicTypesSingleton association;
    addType: BasicIntrinsicTypesSingleton immutableDictionary;
    addType: BasicIntrinsicTypesSingleton universe;

    addType: BasicIntrinsicTypesSingleton gradual;
        
    addType: BasicIntrinsicTypesSingleton int8;
    addType: BasicIntrinsicTypesSingleton int16;
    addType: BasicIntrinsicTypesSingleton int32;
    addType: BasicIntrinsicTypesSingleton int64;

    addType: BasicIntrinsicTypesSingleton uint8;
    addType: BasicIntrinsicTypesSingleton uint16;
    addType: BasicIntrinsicTypesSingleton uint32;
    addType: BasicIntrinsicTypesSingleton uint64;

    addType: BasicIntrinsicTypesSingleton char8;
    addType: BasicIntrinsicTypesSingleton char16;
    addType: BasicIntrinsicTypesSingleton char32;

    addType: BasicIntrinsicTypesSingleton float32;
    addType: BasicIntrinsicTypesSingleton float64.

$makeSimplePureFunctionType($(Array)arguments $(SysmelType)resultType :: SysmelType) := {
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: true.
        argumentTypes: arguments.
        resultType: resultType.
    }).
}.

$makeSimpleFunctionType($(Array)arguments $(SysmelType)resultType :: SysmelType) := {
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        argumentTypes: arguments.
        resultType: resultType.
    }).
}.

$addGlobalIntrinsicMethod($(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive.
        isMacro: false
    }))). functionType).
    DefaultIntrinsicsEnvironment localSymbols at: name put: primitiveValue
}.

$addGlobalMacroIntrinsicMethod($(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive.
        isMacro: true
    }))). functionType).
    DefaultIntrinsicsEnvironment localSymbols at: name put: primitiveValue
}.

$primitive_print($(Array) arguments :: Void) := {
    $!i := 0.
    while: i < arguments size do: {
        
        print(extractValueForPrinting((arguments at: i) value))
    } continueWith: (i := i + 1).
    void
}.

$primitive_printLine($(Array) arguments :: Void) := {
    primitive_print(arguments).
    printLine().
    void
}.

addGlobalIntrinsicMethod(#print. primitive_print.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: false.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: true.
        argumentTypes: [BasicIntrinsicTypesSingleton array].
        resultType: BasicIntrinsicTypesSingleton voidType.
    })
).

addGlobalIntrinsicMethod(#printLine. primitive_printLine.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: true.
        argumentTypes: [BasicIntrinsicTypesSingleton array].
        resultType: BasicIntrinsicTypesSingleton voidType.
    })
).

$primitive_ifThenElse_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeIfSelectionNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        trueExpression: (arguments at: 1).
        falseExpression: (arguments at: 2).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#if:then:else:. primitive_ifThenElse_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_ifThen_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeIfSelectionNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        trueExpression: (arguments at: 1).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#if:then:. primitive_ifThen_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_whileDo_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeWhileLoopNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        body: (arguments at: 1).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#while:do:. primitive_whileDo_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_whileDoContinueWith_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeWhileLoopNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        body: (arguments at: 1).
        continueExpression: (arguments at: 2).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#while:do:continueWith:. primitive_whileDoContinueWith_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_doWhile_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeDoWhileLoopNode#{
        sourcePosition: context sourcePosition.
        body: (arguments at: 0).
        condition: (arguments at: 1).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#do:while:. primitive_doWhile_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_doContinueWithWhile_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeDoWhileLoopNode#{
        sourcePosition: context sourcePosition.
        body: (arguments at: 0).
        continueExpression: (arguments at: 1).
        condition: (arguments at: 2).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#do:continueWith:while:. primitive_doContinueWithWhile_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).


$primitive_Return_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeReturnNode#{
        sourcePosition: context sourcePosition.
        body: (arguments at: 0).
        continueExpression: (arguments at: 1).
        condition: (arguments at: 2).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#return:. primitive_Return_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_SwitchWithCases($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeSwitchNode#{
        sourcePosition: context sourcePosition.
        value: (arguments at: 0).
        cases: (arguments at: 1).
    }))) . BasicIntrinsicTypesSingleton parseTreeNode) .
}.

addGlobalMacroIntrinsicMethod(#switch:withCases:. primitive_SwitchWithCases.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_MatchOfTypeWithPatterns($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeSwitchPatternMatchingNode#{
        sourcePosition: context sourcePosition.
        value: (arguments at: 0).
        valueSumType: (arguments at: 1).
        cases: (arguments at: 2).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#match:ofType:withPatterns:. primitive_MatchOfTypeWithPatterns.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_MatchWithPatterns($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    
    TypedValue(Value(ParseTreeNodeValue(ParseTreeSwitchPatternMatchingNode#{
        sourcePosition: context sourcePosition.
        value: (arguments at: 0).
        cases: (arguments at: 1).
    })). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#match:withPatterns:. primitive_MatchWithPatterns.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_RecordWithFields($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $name := match: (arguments at: 0) ofType: ParseTreeNode withPatterns: #{ 
        $(ParseTreeIdentifierReferenceNode)identifier : identifier value.
        $(ParseTreeLiteralSymbolNode)literal : literal value.
        _: {
            $nameValue := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 0).
            printLine(nameValue).
            abort()
        }
    }.

    $fieldsAndTypesDictionary := extractImmutableDictionaryFromValue((context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 1)) value).
    $fieldCount := fieldsAndTypesDictionary size.

    $fieldNameArray := Array new: fieldCount.
    $fieldTypeArray := Array new: fieldCount.

    $!i := 0. while: i < fieldCount do: {
        $assoc := fieldsAndTypesDictionary associationAt: i.
        $fieldName := assoc key.
        $fieldType := extractTypeFromValue(assoc value).
        fieldNameArray at: i put: fieldName.
        fieldTypeArray at: i put: fieldType.
    } continueWith: (i := i + 1).

    $recordType := SysmelType(SysmelTupleAndRecordType#{
            common: SysmelTypeCommon#{
                name: name.
                isValueType: false.
                valueAlignment: 8u32.
                valueSize: 8u32.
                heapAlignment: 8u32.
                heapSize: 8u32.
                methodDict: SymbolHashtable().
            }.
            supertype: BasicIntrinsicTypesSingleton record.
            fields: fieldTypeArray.
            fieldNames: fieldNameArray.
        }).

    $result := TypedValue(Value(SysmelTypeValue(recordType)). BasicIntrinsicTypesSingleton universe).
    if: name isNotNull then: {
        context environment addLocalSymbol: name withValue: result.
    }.
    
    return: result
}.

addGlobalMacroIntrinsicMethod(#Record:withFields:. primitive_RecordWithFields.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$integerPrimitive_bitInvert($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $argument := arguments at: 0.
    $argumentValue := argument getIntegerValue.

    $result := TypedValue(Value(IntegerValue(argumentValue bitInvert)). argument type).
    result
}.

$integerPrimitive_negated($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $argument := arguments at: 0.
    $argumentValue := argument getIntegerValue.

    $result := TypedValue(Value(IntegerValue(argumentValue negated)). argument type).
    result
}.

$integerPrimitive_add($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue + rightValue)). left type).
    result
}.
$integerPrimitive_minus($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue - rightValue)). left type).
    result
}.
$integerPrimitive_times($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue * rightValue)). left type).
    result
}.
$integerPrimitive_integerDivision($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue // rightValue)). left type).
    result
}.
$integerPrimitive_integerModulo($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue % rightValue)). left type).
    result
}.

$integerPrimitive_equals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue = rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_notEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue ~= rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_lessThan($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue < rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_lessOrEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue <= rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_greaterThan($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue > rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_greaterOrEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue >= rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$addIntegerIntrinsicMethod($(SymbolHashtable)methodDict $(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive
    }))). functionType).
    methodDict at: name put: primitiveValue
}.
$addIntegerIntrinsicMethods($(SysmelType)intrinsicType :: Void) := {
    $commonPart := intrinsicType getCommonSection.
    $methodDict := commonPart methodDict.

    $unaryFunctionType := SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: true.
        argumentTypes: [intrinsicType].
        resultType: intrinsicType.
    }).

    $binaryFunctionType := SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: true.
        argumentTypes: [intrinsicType . intrinsicType].
        resultType: intrinsicType.
    }).

    $binaryComparisonFunctionType := SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: true.
        argumentTypes: [intrinsicType . intrinsicType].
        resultType: BasicIntrinsicTypesSingleton boolean.
    }).

    addIntegerIntrinsicMethod(methodDict. #bitInvert. integerPrimitive_bitInvert. unaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #negated. integerPrimitive_negated. unaryFunctionType).

    addIntegerIntrinsicMethod(methodDict. #+. integerPrimitive_add. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #-. integerPrimitive_minus. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #"*". integerPrimitive_times. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #//. integerPrimitive_integerDivision. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #%. integerPrimitive_integerModulo. binaryFunctionType).

    addIntegerIntrinsicMethod(methodDict. #=. integerPrimitive_equals. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #~=. integerPrimitive_notEquals. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #<. integerPrimitive_lessThan. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #<=. integerPrimitive_lessOrEquals. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #>. integerPrimitive_greaterThan. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #>=. integerPrimitive_greaterOrEquals. binaryComparisonFunctionType).

    void
}.


addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton integer).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton character).

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int8).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int16).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int32).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int64).

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint8).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint16).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint32).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint64).

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton char8).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton char16).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton char32).


$addIntrinsicMethod($(SymbolHashtable)methodDict $(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive
    }))). functionType).
    methodDict at: name put: primitiveValue
}.

$stringPrimitive_concatenate($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $right := arguments at: 1.

    $leftString := extractStringFromValue(left value).
    $rightString := extractStringFromValue(right value).
    $result := leftString -- rightString.
    TypedValue(Value(StringValue(result)). BasicIntrinsicTypesSingleton array)
}.

$stringPrimitive_size($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $string := arguments at: 0.
    $stringValue := extractStringFromValue(string value).
    TypedValue(Value(IntegerValue(stringValue size)). BasicIntrinsicTypesSingleton integer)
}.

$stringPrimitive_at($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $string := arguments at: 0.
    $stringValue := extractStringFromValue(string value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= stringValue size then: {
        printLine("Index ". indexValue . " is out bounds.")
        abort().
    }.
    $character := stringValue at: indexValue.
    TypedValue(Value(CharacterValue(character)). BasicIntrinsicTypesSingleton character)
}.

$addStringPrimitives() := {
    $stringType := BasicIntrinsicTypesSingleton string.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $characterType := BasicIntrinsicTypesSingleton character.
    $commonPart := stringType getCommonSection.
    $methodDict := commonPart methodDict.
    
    addIntrinsicMethod(methodDict. #--. stringPrimitive_concatenate . makeSimplePureFunctionType([stringType . stringType]. stringType)).
    addIntrinsicMethod(methodDict. #size. stringPrimitive_size . makeSimplePureFunctionType([stringType]. integerType)).
    addIntrinsicMethod(methodDict. #at:. stringPrimitive_at . makeSimplePureFunctionType([stringType . integerType]. characterType)).
}.

addStringPrimitives().

$arrayPrimitive_concatenate($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $right := arguments at: 1.

    $leftArray := extractArrayFromValue(left value).
    $rightArray := extractArrayFromValue(right value).
    $result := leftArray -- rightArray.
    TypedValue(Value(ArrayValue(result)). BasicIntrinsicTypesSingleton array).
}.

$arrayPrimitive_size($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedArray := arguments at: 0.

    $array := extractArrayFromValue(typedArray value).
    TypedValue(Value(IntegerValue(array size)). BasicIntrinsicTypesSingleton integer).
}.

$arrayPrimitive_at($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $array := arguments at: 0.
    $arrayValue := extractArrayFromValue(array value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= arrayValue size then: {
        printLine("Index ". indexValue . " is out bounds.")
        abort().
    }.
    $element := arrayValue at: indexValue.
    element
}.

$arrayPrimitive_atPut($(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    $array := arguments at: 0.
    $arrayValue := extractArrayFromValue(array value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= arrayValue size then: {
        printLine("Index ". indexValue . " is out bounds.")
        abort().
    }.
    $element := arguments at: 2.
    arrayValue at: indexValue put: element.
    element
}.

$addArrayPrimitives() := {
    $arrayType := BasicIntrinsicTypesSingleton array.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $gradualType := BasicIntrinsicTypesSingleton gradual.
    $commonPart := arrayType getCommonSection.
    $methodDict := commonPart methodDict.
    
    addIntrinsicMethod(methodDict. #--. arrayPrimitive_concatenate . makeSimplePureFunctionType([arrayType . arrayType]. arrayType)).
    addIntrinsicMethod(methodDict. #size. arrayPrimitive_size . makeSimplePureFunctionType([arrayType]. integerType)).
    addIntrinsicMethod(methodDict. #at:. arrayPrimitive_at . makeSimplePureFunctionType([arrayType . integerType]. gradualType)).
    addIntrinsicMethod(methodDict. #at:put:. arrayPrimitive_atPut . makeSimpleFunctionType([arrayType . integerType. gradualType]. gradualType)).
}.
addArrayPrimitives().

$tuplePrimitive_size($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedTuple := arguments at: 0.

    $tuple := extractTupleFromValue(typedTuple value).
    TypedValue(Value(IntegerValue(tuple size)). BasicIntrinsicTypesSingleton integer).
}.

$tuplePrimitive_at($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $tuple := arguments at: 0.
    $tupleValue := extractTupleFromValue(tuple value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= tupleValue size then: {
        printLine("Index ". indexValue . " is out bounds.")
        abort().
    }.
    $element := tupleValue at: indexValue.
    element
}.

$addTuplePrimitives() := {
    $tupleType := BasicIntrinsicTypesSingleton tuple.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $gradualType := BasicIntrinsicTypesSingleton gradual.
    $commonPart := tupleType getCommonSection.
    $methodDict := commonPart methodDict.
    
    addIntrinsicMethod(methodDict. #size. tuplePrimitive_size . makeSimplePureFunctionType([tupleType]. integerType)).
    addIntrinsicMethod(methodDict. #at:. tuplePrimitive_at . makeSimplePureFunctionType([tupleType . integerType]. gradualType)).
}.
addTuplePrimitives().

$associationPrimitive_key($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedAssociation := arguments at: 0.

    $assoc := extractAssociationFromValue(typedAssociation value).
    TypedValue(Value(GradualValue(assoc key)). BasicIntrinsicTypesSingleton gradual)
}.

$associationPrimitive_value($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedAssociation := arguments at: 0.

    $assoc := extractAssociationFromValue(typedAssociation value).
    TypedValue(Value(GradualValue(assoc value)). BasicIntrinsicTypesSingleton gradual)
}.

$addAssociationPrimitives() := {
    $associationType := BasicIntrinsicTypesSingleton association.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $gradualType := BasicIntrinsicTypesSingleton gradual.
    $commonPart := associationType getCommonSection.
    $methodDict := commonPart methodDict.
    
    addIntrinsicMethod(methodDict. #key. associationPrimitive_key . makeSimplePureFunctionType([associationType]. gradualType)).
    addIntrinsicMethod(methodDict. #value. associationPrimitive_value . makeSimplePureFunctionType([associationType]. gradualType)).
}.
addAssociationPrimitives().

$immutableDictPrimitive_size($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedDict := arguments at: 0.

    $dict := extractImmutableDictionaryFromValue(typedDict value).
    TypedValue(Value(IntegerValue(typedDict size)). BasicIntrinsicTypesSingleton integer).
}.

$immutableDictPrimitive_associationAt($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $typedDict := arguments at: 0.
    $dict := extractImmutableDictionaryFromValue(typedDict value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= dict size then: {
        printLine("Index ". indexValue . " is out bounds.")
        abort().
    }.
    $association := dict associationAt: indexValue.
    TypedValue(Value(AssociationValue(association)). BasicIntrinsicTypesSingleton integer)
}.

$immutableDictPrimitive_includesKey($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $typedDict := arguments at: 0.
    $dict := extractImmutableDictionaryFromValue(typedDict value).
    $key := extractValueForAnalysis((arguments at: 1) value).
    $result := dict includesKey: key.
    TypedValue(Value(BooleanValue(result)) . BasicIntrinsicTypesSingleton boolean )
}.

$immutableDictPrimitive_at($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $typedDict := arguments at: 0.
    $dict := extractImmutableDictionaryFromValue(typedDict value).
    $key := extractValueForAnalysis((arguments at: 1) value).
    $result := dict at: key.
    TypedValue(Value(BooleanValue(result)) . BasicIntrinsicTypesSingleton boolean )
}.

$addImmutableDictionaryPrimitives() := {
    $dictType := BasicIntrinsicTypesSingleton immutableDictionary.
    $associationType := BasicIntrinsicTypesSingleton association.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $gradualType := BasicIntrinsicTypesSingleton gradual.
    $booleanType := BasicIntrinsicTypesSingleton boolean.
    $commonPart := dictType getCommonSection.
    $methodDict := commonPart methodDict.
    
    addIntrinsicMethod(methodDict. #size. immutableDictPrimitive_size . makeSimplePureFunctionType([dictType]. integerType)).
    addIntrinsicMethod(methodDict. #associationAt:. immutableDictPrimitive_associationAt . makeSimplePureFunctionType([dictType . integerType]. associationType)).
    addIntrinsicMethod(methodDict. #includesKey:. immutableDictPrimitive_includesKey . makeSimplePureFunctionType([dictType . gradualType]. booleanType)).
    addIntrinsicMethod(methodDict. #at:. immutableDictPrimitive_at . makeSimplePureFunctionType([dictType . gradualType]. gradualType)).
}.
addImmutableDictionaryPrimitives().

public: [
    $getBasicIntrinsicTypes(:: BasicIntrinsicTypes) := BasicIntrinsicTypesSingleton.
    $getDefaultIntrinsicsEnvironment(:: Environment) := Environment(DefaultIntrinsicsEnvironment).

    $instantiateTypeWithArguments($(SysmelType)typeToInstantiate $(Array)arguments :: TypedValue) := 
    {
        match: typeToInstantiate ofType: SysmelType withPatterns: #{
            $(SysmelTupleAndRecordType) tupleAndRecord : {
                $tuple := Tuple new: tupleAndRecord fields size.
                $record := Record#{
                    type: typeToInstantiate.
                    tuple: tuple.
                }.

                if: (arguments size = 1) then: {
                    printLine("arg0: ".arguments at: 0)
                    
                }.

                $result := TypedValue(Value(RecordValue(record)). typeToInstantiate).
                return: result
            }.
            _: {
                printLine("Unsupported instantiation of type: ". typeToInstantiate).
            }
        }.
        printLine("TODO: instantiateTypeWithArguments: ". typeToInstantiate).
        abort()
    }.

    SysmelType
        withSelector: #lookupSelector: addMethod: {
            | $(SysmelType)self $(Symbol)selector :: TypedValue |
            $commonSection := self getCommonSection.
            if: (commonSection methodDict includesKey: selector) then: {
                return: (commonSection methodDict at: selector)
            }.

            $supertype := self getSupertype.
            if: supertype ~~ null then: {
                return: (supertype lookupSelector: selector)
            }.

            TypedValue(Value(InvalidErrorValue("Failed to find selector.")). getBasicIntrinsicTypes() null).
        }.
].
}