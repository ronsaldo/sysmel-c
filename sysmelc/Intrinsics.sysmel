namespace: SysmelC definition: {
$DefaultIntrinsicsEnvironment := IntrinsicsEnvironment#{
    parent: Environment(EmptyEnvironment()).
    localSymbols: SymbolHashtable().
}.

public: [
    Record: BasicIntrinsicTypes withFields: #{
        null: SysmelType.
        voidType: SysmelType.
        boolean: SysmelType.
        integer: SysmelType.
        float: SysmelType.
        character: SysmelType.
        gradual: SysmelType.
        string: SysmelType.
        symbol: SysmelType.
        array: SysmelType.
        tuple: SysmelType.
        record: SysmelType.
        class: SysmelType.
        sum: SysmelType.
        byteArray: SysmelType.
        association: SysmelType.
        immutableDictionary: SysmelType.
        parseTreeNode: SysmelType.
        function: SysmelType.
        namespace: SysmelType.
        universe: SysmelType.

        uint8:  SysmelType.
        uint16: SysmelType.
        uint32: SysmelType.
        uint64: SysmelType.

        int8:  SysmelType.
        int16: SysmelType.
        int32: SysmelType.
        int64: SysmelType.

        char8:  SysmelType.
        char16: SysmelType.
        char32: SysmelType.

        float32: SysmelType.
        float64: SysmelType.
    }
].

$BasicIntrinsicTypesSingleton := BasicIntrinsicTypes#{
    null: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Null.  isValueType: true. valueAlignment: 0u8. valueSize: 0u8. heapAlignment: 0u8. heapSize: 0u8. methodDict: SymbolHashtable().
    })).
    voidType: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Void.  isValueType: true. valueAlignment: 0u8. valueSize: 0u8. heapAlignment: 0u8. heapSize: 0u8. methodDict: SymbolHashtable().
    })).
    boolean: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Boolean. isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    integer: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Integer. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    float: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Float. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    character: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Character. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    string: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #String. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    symbol: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Symbol. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    array: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Array. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    tuple: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Tuple. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    record: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Record. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    class: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Class. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    sum: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Sum. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    parseTreeNode: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #ParseTreeNode. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    byteArray: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #ByteArray. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    association: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Association. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    immutableDictionary: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #ImmutableDictionary. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    function: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Function. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    namespace: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #NamespaceType. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    universe: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #TypeUniverse. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    gradual: SysmelType(SysmelGradualType(SysmelTypeCommon#{
        name: #Gradual. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).

    uint8: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt8.  printingSuffix: #u8.  isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    uint16: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt16. printingSuffix: #u16. isValueType: true. valueAlignment: 2u8. valueSize: 2u8. heapAlignment: 2u8. heapSize: 2u8. methodDict: SymbolHashtable().
    })).
    uint32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt32. printingSuffix: #u32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).
    uint64: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt64. printingSuffix: #u64. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).

    int8: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int8.  printingSuffix: #i8.  isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    int16: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int16. printingSuffix: #i16. isValueType: true. valueAlignment: 2u8. valueSize: 2u8. heapAlignment: 2u8. heapSize: 2u8. methodDict: SymbolHashtable().
    })).
    int32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int32. printingSuffix: #i32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).
    int64: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int64. printingSuffix: #i64. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).

    char8: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Char8.  printingSuffix: #c8.  isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    char16: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Char16. printingSuffix: #c16. isValueType: true. valueAlignment: 2u8. valueSize: 2u8. heapAlignment: 2u8. heapSize: 2u8. methodDict: SymbolHashtable().
    })).
    char32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Char32. printingSuffix: #c32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).

    float32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Float32. printingSuffix: #f32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).
    float64: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Float64. printingSuffix: #f64. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
}.

IntrinsicsEnvironment
    withSelector: #addType: addMethod: {
        |$(IntrinsicsEnvironment)self $(SysmelType)type :: Void |
        match: type ofType: SysmelType withPatterns: #{
            $(SysmelBasicType)basicType : {
                ##printLine("Add type ". basicType common name).
                self localSymbols at: basicType common name put: TypedValue(Value(SysmelTypeValue(type)). BasicIntrinsicTypesSingleton universe)
            }.
            $(SysmelGradualType)gradualType : {
                ##printLine("Add type ". basicType common name).
                self localSymbols at: gradualType common name put: TypedValue(Value(SysmelTypeValue(type)). BasicIntrinsicTypesSingleton universe)
            }.
            _: {
                printLine("Missing support for type ". type)
            }
        }.
        void
    };
    withSelector: #addTypedValue:withName: addMethod: {
        |$(IntrinsicsEnvironment)self $(TypedValue)value $(Symbol)name :: Void |
        self localSymbols at: name put: value.
        void
    }.
    

DefaultIntrinsicsEnvironment
    addType: BasicIntrinsicTypesSingleton null;
    addTypedValue: TypedValue(Value(NullValue()). BasicIntrinsicTypesSingleton null) withName: #null;

    addType: BasicIntrinsicTypesSingleton voidType;
    addTypedValue: TypedValue(Value(VoidValue()). BasicIntrinsicTypesSingleton voidType) withName: #void;

    addType: BasicIntrinsicTypesSingleton boolean;
    addTypedValue: TypedValue(Value(BooleanValue(true)). BasicIntrinsicTypesSingleton boolean) withName: #true;
    addTypedValue: TypedValue(Value(BooleanValue(false)). BasicIntrinsicTypesSingleton boolean) withName: #false;

    addType: BasicIntrinsicTypesSingleton integer;
    addType: BasicIntrinsicTypesSingleton character;
    addType: BasicIntrinsicTypesSingleton float;
    addType: BasicIntrinsicTypesSingleton gradual;
    addType: BasicIntrinsicTypesSingleton string;
    addType: BasicIntrinsicTypesSingleton symbol;
    addType: BasicIntrinsicTypesSingleton array;
    addType: BasicIntrinsicTypesSingleton tuple;
    addType: BasicIntrinsicTypesSingleton record;
    addType: BasicIntrinsicTypesSingleton class;
    addType: BasicIntrinsicTypesSingleton sum;
    addType: BasicIntrinsicTypesSingleton byteArray;
    addType: BasicIntrinsicTypesSingleton association;
    addType: BasicIntrinsicTypesSingleton immutableDictionary;
    addType: BasicIntrinsicTypesSingleton namespace;
    addType: BasicIntrinsicTypesSingleton gradual;
    addType: BasicIntrinsicTypesSingleton function;
    addType: BasicIntrinsicTypesSingleton universe;
        
    addType: BasicIntrinsicTypesSingleton int8;
    addType: BasicIntrinsicTypesSingleton int16;
    addType: BasicIntrinsicTypesSingleton int32;
    addType: BasicIntrinsicTypesSingleton int64;

    addType: BasicIntrinsicTypesSingleton uint8;
    addType: BasicIntrinsicTypesSingleton uint16;
    addType: BasicIntrinsicTypesSingleton uint32;
    addType: BasicIntrinsicTypesSingleton uint64;

    addType: BasicIntrinsicTypesSingleton char8;
    addType: BasicIntrinsicTypesSingleton char16;
    addType: BasicIntrinsicTypesSingleton char32;

    addType: BasicIntrinsicTypesSingleton float32;
    addType: BasicIntrinsicTypesSingleton float64.

$makeSimplePureFunctionType($(Array)arguments $(SysmelType)resultType :: SysmelType) := {
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            name: null.
            printingSuffix: null.
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        supertype: BasicIntrinsicTypesSingleton function.
        isCompileTimePure: true.
        isVariadic: false.
        argumentTypes: arguments.
        resultType: resultType.
    }).
}.

$makeSimpleFunctionType($(Array)arguments $(SysmelType)resultType :: SysmelType) := {
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            name: null.
            printingSuffix: null.
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        supertype: BasicIntrinsicTypesSingleton function.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: arguments.
        resultType: resultType.
    }).
}.

$addGlobalIntrinsicMethod($(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive.
        isMacro: false
    }))). functionType).
    DefaultIntrinsicsEnvironment localSymbols at: name put: primitiveValue
}.

public: [
$addGlobalMacroIntrinsicMethod($(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive.
        isMacro: true
    }))). functionType).
    DefaultIntrinsicsEnvironment localSymbols at: name put: primitiveValue
}.
].
$primitive_print($(Array) arguments :: Void) := {
    $!i := 0.
    while: i < arguments size do: {
        print(extractValueForPrinting((arguments at: i) value))
    } continueWith: (i := i + 1).
    void
}.

$primitive_printLine($(Array) arguments :: Void) := {
    primitive_print(arguments).
    printLine().
    void
}.

$primitive_abort($(Array) arguments :: Void) := {
    abort().
    void
}.

addGlobalIntrinsicMethod(#print. primitive_print.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: false.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: true.
        argumentTypes: [BasicIntrinsicTypesSingleton array].
        resultType: BasicIntrinsicTypesSingleton voidType.
    })
).

addGlobalIntrinsicMethod(#printLine. primitive_printLine.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: true.
        argumentTypes: [BasicIntrinsicTypesSingleton array].
        resultType: BasicIntrinsicTypesSingleton voidType.
    })
).

addGlobalIntrinsicMethod(#abort. primitive_abort.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [BasicIntrinsicTypesSingleton array].
        resultType: BasicIntrinsicTypesSingleton voidType.
    })
).
$primitive_ifThenElse_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeIfSelectionNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        trueExpression: (arguments at: 1).
        falseExpression: (arguments at: 2).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#if:then:else:. primitive_ifThenElse_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_ifThen_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeIfSelectionNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        trueExpression: (arguments at: 1).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#if:then:. primitive_ifThen_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_whileDo_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeWhileLoopNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        body: (arguments at: 1).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#while:do:. primitive_whileDo_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_whileDoContinueWith_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeWhileLoopNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        body: (arguments at: 1).
        continueExpression: (arguments at: 2).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#while:do:continueWith:. primitive_whileDoContinueWith_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_doWhile_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeDoWhileLoopNode#{
        sourcePosition: context sourcePosition.
        body: (arguments at: 0).
        condition: (arguments at: 1).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#do:while:. primitive_doWhile_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_doContinueWithWhile_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeDoWhileLoopNode#{
        sourcePosition: context sourcePosition.
        body: (arguments at: 0).
        continueExpression: (arguments at: 1).
        condition: (arguments at: 2).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#do:continueWith:while:. primitive_doContinueWithWhile_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).


$primitive_Return_Macro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeReturnNode#{
        sourcePosition: context sourcePosition.
        valueExpression: (arguments at: 0).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#return:. primitive_Return_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_SwitchWithCases($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeSwitchNode#{
        sourcePosition: context sourcePosition.
        value: (arguments at: 0).
        cases: (arguments at: 1).
    }))) . BasicIntrinsicTypesSingleton parseTreeNode) .
}.

addGlobalMacroIntrinsicMethod(#switch:withCases:. primitive_SwitchWithCases.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_MatchOfTypeWithPatterns($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    TypedValue(Value(ParseTreeNodeValue(ParseTreeNode(ParseTreeSwitchPatternMatchingNode#{
        sourcePosition: context sourcePosition.
        value: (arguments at: 0).
        valueSumType: (arguments at: 1).
        cases: (arguments at: 2).
    }))). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#match:ofType:withPatterns:. primitive_MatchOfTypeWithPatterns.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_MatchWithPatterns($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    
    TypedValue(Value(ParseTreeNodeValue(ParseTreeSwitchPatternMatchingNode#{
        sourcePosition: context sourcePosition.
        value: (arguments at: 0).
        cases: (arguments at: 1).
    })). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#match:withPatterns:. primitive_MatchWithPatterns.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_RecordWithFields($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $name := match: (arguments at: 0) ofType: ParseTreeNode withPatterns: #{ 
        $(ParseTreeIdentifierReferenceNode)identifier : identifier value.
        $(ParseTreeLiteralSymbolNode)literal : literal value.
        _: {
            $nameValue := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 0).
            printLine(nameValue).
            abort()
        }
    }.

    $fieldsAndTypesDictionary := extractImmutableDictionaryFromValue((context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 1)) value).
    $fieldCount := fieldsAndTypesDictionary size.

    $fieldNameArray := Array new: fieldCount.
    $fieldTypeArray := Array new: fieldCount.

    $!i := 0. while: i < fieldCount do: {
        $assoc := fieldsAndTypesDictionary associationAt: i.
        $fieldName := extractSymbolFromValue(assoc key).
        $fieldType := extractTypeFromValue(assoc value).
        fieldNameArray at: i put: fieldName.
        fieldTypeArray at: i put: fieldType.
    } continueWith: (i := i + 1).

    $recordType := SysmelType(SysmelTupleAndRecordType#{
            common: SysmelTypeCommon#{
                name: name.
                isValueType: false.
                valueAlignment: 8u32.
                valueSize: 8u32.
                heapAlignment: 8u32.
                heapSize: 8u32.
                methodDict: SymbolHashtable().
            }.
            supertype: BasicIntrinsicTypesSingleton record.
            fields: fieldTypeArray.
            fieldNames: fieldNameArray.
        }).

    $result := TypedValue(Value(SysmelTypeValue(recordType)). BasicIntrinsicTypesSingleton universe).
    if: name isNotNull then: {
        context environment addLocalSymbol: name withValue: result.
    }.
    
    return: result
}.

addGlobalMacroIntrinsicMethod(#Record:withFields:. primitive_RecordWithFields.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_ClassWithFields($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $name := match: (arguments at: 0) ofType: ParseTreeNode withPatterns: #{ 
        $(ParseTreeIdentifierReferenceNode)identifier : identifier value.
        $(ParseTreeLiteralSymbolNode)literal : literal value.
        _: {
            $nameValue := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 0).
            printLine(nameValue).
            abort()
        }
    }.

    $fieldsAndTypesDictionary := extractImmutableDictionaryFromValue((context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 1)) value).
    $fieldCount := fieldsAndTypesDictionary size.

    $fieldNameArray := Array new: fieldCount.
    $fieldTypeArray := Array new: fieldCount.

    $!i := 0. while: i < fieldCount do: {
        $assoc := fieldsAndTypesDictionary associationAt: i.
        $fieldName := extractSymbolFromValue(assoc key).
        $fieldType := extractTypeFromValue(assoc value).
        fieldNameArray at: i put: fieldName.
        fieldTypeArray at: i put: fieldType.
    } continueWith: (i := i + 1).

    $classType := SysmelType(SysmelClassType#{
            common: SysmelTypeCommon#{
                name: name.
                isValueType: false.
                valueAlignment: 8u32.
                valueSize: 8u32.
                heapAlignment: 8u32.
                heapSize: 8u32.
                methodDict: SymbolHashtable().
            }.
            supertype: BasicIntrinsicTypesSingleton class.
            superFieldCount: 0.
            fields: fieldTypeArray.
            fieldNames: fieldNameArray.
        }).

    $result := TypedValue(Value(SysmelTypeValue(classType)). BasicIntrinsicTypesSingleton universe).
    if: name isNotNull then: {
        context environment addLocalSymbol: name withValue: result.
    }.
    
    return: result
}.

addGlobalMacroIntrinsicMethod(#Class:withFields:. primitive_ClassWithFields.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_ClassWithSuperclassAndFields($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    $name := match: (arguments at: 0) ofType: ParseTreeNode withPatterns: #{ 
        $(ParseTreeIdentifierReferenceNode)identifier : identifier value.
        $(ParseTreeLiteralSymbolNode)literal : literal value.
        _: {
            $nameValue := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 0).
            printLine(nameValue).
            abort()
        }
    }.

    $supertype := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 1).
    $supertypeValue := supertype value getTypeValue.
    $!superFieldCount := 0.
    ##printLine(name. " supertype ". supertypeValue).
    match: supertypeValue ofType: SysmelType withPatterns: #{
        $(SysmelClassType)clazz : {
            superFieldCount := clazz superFieldCount + clazz fields size.
        }.
        _: {
            printLine("Supertype of classes must be other class.").
            abort()
        }
    }.

    $fieldsAndTypesDictionary := extractImmutableDictionaryFromValue((context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 2)) value).
    $fieldCount := fieldsAndTypesDictionary size.

    $fieldNameArray := Array new: fieldCount.
    $fieldTypeArray := Array new: fieldCount.

    $!i := 0. while: i < fieldCount do: {
        $assoc := fieldsAndTypesDictionary associationAt: i.
        $fieldName := extractSymbolFromValue(assoc key).
        $fieldType := extractTypeFromValue(assoc value).
        fieldNameArray at: i put: fieldName.
        fieldTypeArray at: i put: fieldType.
    } continueWith: (i := i + 1).

    ##printLine("Class " .name . " supertype " . supertypeValue).
    $classType := SysmelType(SysmelClassType#{
            common: SysmelTypeCommon#{
                name: name.
                isValueType: false.
                valueAlignment: 8u32.
                valueSize: 8u32.
                heapAlignment: 8u32.
                heapSize: 8u32.
                methodDict: SymbolHashtable().
            }.
            supertype: supertypeValue.
            superFieldCount: superFieldCount.
            fields: fieldTypeArray.
            fieldNames: fieldNameArray.
        }).

    $result := TypedValue(Value(SysmelTypeValue(classType)). BasicIntrinsicTypesSingleton universe).
    if: name isNotNull then: {
        context environment addLocalSymbol: name withValue: result.
    }.
    
    return: result
}.

addGlobalMacroIntrinsicMethod(#Class:withSuperclass:fields:. primitive_ClassWithSuperclassAndFields.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_EnumWithBaseTypeAndValues($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    $name := match: (arguments at: 0) ofType: ParseTreeNode withPatterns: #{ 
        $(ParseTreeIdentifierReferenceNode)identifier : identifier value.
        $(ParseTreeLiteralSymbolNode)literal : literal value.
        _: {
            $nameValue := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 0).
            printLine(nameValue).
            abort()
        }
    }.

    ##printLine("arguments ". arguments at: 1).
    $baseType := extractTypeFromValue((context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 1)) value).

    ##printLine("Arg: ". (arguments at: 2)).
    $namesAndValuesDictionary := extractImmutableDictionaryFromValue((context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 2)) value).
    ##printLine("namesAndValuesDictionary ". namesAndValuesDictionary).

    $valueCount := namesAndValuesDictionary size.
    $!nextValue := 0.

    $valueNameArray := Array new: valueCount.
    $valuesArray := Array new: valueCount.
    $!i := 0. while: i < valueCount do: {
        $nameAndValueAssociation := namesAndValuesDictionary associationAt: i.
        $valueName := extractSymbolFromValue(nameAndValueAssociation key).
        $value := if: nameAndValueAssociation value isNull then: {
            Value(IntegerValue(nextValue))
        } else: {
            nameAndValueAssociation value
        }.
        ##printLine(i. " nameAndValueAssociation: ". nameAndValueAssociation).
        ##printLine(i. " name: ". valueName).
        ##printLine(i. " value: ". value).

        valueNameArray at: i put: valueName.
        valuesArray at: i put: value.

        nextValue := extractIntegerFromValue(value) + 1.
    } continueWith: (i := i + 1).


    ##extractImmutableDictionaryFromValue
    ##$valueCount := namesAndValuesDictionary size.

    $enumType := SysmelType(SysmelEnumType#{
            common: SysmelTypeCommon#{
                name: name.
                isValueType: true.
                valueAlignment: 8u32.
                valueSize: 8u32.
                heapAlignment: 8u32.
                heapSize: 8u32.
                methodDict: SymbolHashtable().
            }.
            supertype: baseType.
            valueCount: valueCount asUInt32.
            values: valuesArray.
            valueNames: valueNameArray.
        }).

    $result := TypedValue(Value(SysmelTypeValue(enumType)). BasicIntrinsicTypesSingleton universe).
    if: name isNotNull then: {
        context environment addLocalSymbol: name withValue: result.
    }.

    return: result
}.

addGlobalMacroIntrinsicMethod(#Enum:withBaseType:values:. primitive_EnumWithBaseTypeAndValues.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_InductiveWithAlternativesMacro($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $name := match: (arguments at: 0) ofType: ParseTreeNode withPatterns: #{ 
        $(ParseTreeIdentifierReferenceNode)identifier : identifier value.
        $(ParseTreeLiteralSymbolNode)literal : literal value.
        _: {
            $nameValue := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 0).
            printLine(nameValue).
            abort()
        }
    }.

    $alternativesParseNodes := match: (arguments at: 1) ofType: ParseTreeNode withPatterns: #{ 
        $(ParseTreeArrayNode)parseArrayNode : parseArrayNode elements.
        _: {
            printLine("Unsupported node for constructing an inductive type").
            abort().
        }.
    }.

    $alternativeCount := alternativesParseNodes size.
    $alternatives := Array new: alternativeCount.
    $inductiveType := SysmelType(SysmelSumType#{
            common: SysmelTypeCommon#{
                name: name.
                isValueType: true.
                valueAlignment: 16u32.
                valueSize: 16u32.
                heapAlignment: 16u32.
                heapSize: 16u32.
                methodDict: SymbolHashtable().
            }.
            supertype: BasicIntrinsicTypesSingleton sum.
            alternativeCount: alternatives size.
            alternatives: alternatives
        }).
    
    $result := TypedValue(Value(SysmelTypeValue(inductiveType)). BasicIntrinsicTypesSingleton universe).
    if: name isNotNull then: {
        context environment addLocalSymbol: name withValue: result.
    }.

    $!i := 0. while: (i < alternativeCount) do: {
        $alternativeTypedValue := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (alternativesParseNodes at: i).
        $alternativeType := alternativeTypedValue value getTypeValue.
        alternatives at: i put: alternativeType
    } continueWith: (i := i + 1).

    return: result
}.

addGlobalMacroIntrinsicMethod(#Inductive:withAlternatives: . primitive_InductiveWithAlternativesMacro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_NamespaceDefinition($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $name := match: (arguments at: 0) ofType: ParseTreeNode withPatterns: #{ 
        $(ParseTreeIdentifierReferenceNode)identifier : identifier value.
        $(ParseTreeLiteralSymbolNode)literal : literal value.
        _: {
            $nameValue := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 0).
            abort()
        }
    }.

    $currentNamespace := context environment lookupNamespace.
    $newNamespace := currentNamespace getOrCreateChildNamespaceNamed: name.
    ##printLine("newOrOldNamespace: ". newNamespace)

    $namespaceNode := ParseTreeNode(ParseTreeNamespaceDefinitionNode#{
        sourcePosition: context sourcePosition.
        namespace: newNamespace.
        definition: (arguments at: 1).
    }).

    return: TypedValue(Value(ParseTreeNodeValue(namespaceNode)). BasicIntrinsicTypesSingleton parseTreeNode).
}.

addGlobalMacroIntrinsicMethod(#namespace:definition:. primitive_NamespaceDefinition.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_Public($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $expressionsArray := match: (arguments at: 0) ofType: ParseTreeNode withPatterns: #{
        $(ParseTreeArrayNode)arrayNode : arrayNode elements.
        _: {
            printLine("The public: macro expects an array with definitions.").
            abort()
        }
    }.

    $ownerNamespace := context environment lookupNamespace.
    $!lastElement := TypedValue(Value(VoidValue()). BasicIntrinsicTypesSingleton voidType).

    $!i := 0. while: (i < expressionsArray size) do: {
        $valueAST := expressionsArray at: i.
        $typedValueToExport := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: valueAST.
        ##context sourcePosition printFormatted. 
        if: typedValueToExport ~~ void then: {
                lastElement := match: typedValueToExport value ofType: Value withPatterns: #{
                    $(SysmelTypeValue)typeValue : {
                    ##printLine("Public typeValueValue ". typeValueValue).
                    $typeValueValue := typeValue value.
                    $typeName := typeValueValue getCommonSection name.
                    ownerNamespace exportTypedValue: typedValueToExport withName: typeName.
                    match: typeValueValue ofType: SysmelType withPatterns: #{
                        $(SysmelSumType)sumType : {
                            $sumAlternatives := sumType alternatives.
                            $sumAlternativeCount := sumAlternatives size.
                            $!i := 0. while: (i < sumAlternativeCount) do: {
                                $alternative := sumAlternatives at: i.
                                $alternativeName := alternative getCommonSection name.
                                ##printLine("alternative ". alternativeName).

                                $alternativeTypedValue := TypedValue(Value(SysmelTypeValue(alternative)). BasicIntrinsicTypesSingleton universe).
                                ##printLine("alternative typedValue ". alternativeTypedValue).

                                ownerNamespace exportTypedValue: alternativeTypedValue withName: alternativeName.

                            } continueWith: (i := i + 1).
                        }.
                        _: {
                            ## Nothing special is required here
                        }
                    }.
                    typedValueToExport
                }.
                $(SysmelFunctionValue)functionValue : {
                    $functionName := functionValue value getName.
                    ownerNamespace exportTypedValue: typedValueToExport withName: functionName.
                    typedValueToExport
                }.
                _: {
                    printLine("Unsupported value to export ". typedValueToExport value).
                    abort()
                }
            }
        }.
    } continueWith: (i := i + 1).

    return: lastElement
}.

addGlobalMacroIntrinsicMethod(#public:. primitive_Public.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_SetMainEntryPoint($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $mainEntryPoint := context semanticsState analyzeAndEvaluateWithEnvironment: context environment script: (arguments at: 0).

    $currentModule := context environment lookupModule.
    currentModule mainEntryPoint: mainEntryPoint.

    return: TypedValue(Value(VoidValue()). BasicIntrinsicTypesSingleton voidType).
}.

addGlobalMacroIntrinsicMethod(#setMainEntryPoint:. primitive_SetMainEntryPoint.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$primitive_Assert($(MacroContext)context $(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $parseNode := ParseTreeNode(ParseTreeAssertNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0)
    }).
    $typedParseNodeValue := TypedValue(Value(ParseTreeNodeValue(parseNode)). BasicIntrinsicTypesSingleton parseTreeNode).
    return: typedParseNodeValue
}.

addGlobalMacroIntrinsicMethod(#assert:. primitive_Assert.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: false.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$universePrimitiveWithSelectorAddMethod($(Array)arguments) := {
    $type := arguments at: 0.
    $selector := arguments at: 1.
    $method := arguments at: 2.

    $typeMethodDictionary := extractTypeFromValue(type value) getCommonSection methodDict.
    $selector := extractSymbolFromValue(selector value).
    $function := extractFunctionFromValue(method value).
    if: function getName isNull then: {
        function setName: selector
    }.

    typeMethodDictionary at: selector put: method.
    
    void
}.

$universePrimitiveNewWithCount($(Array)arguments) := {
    assert: arguments size = 2.
    $type := arguments at: 0.
    $count := arguments at: 1.

    $countValue := extractIntegerFromValue(count value).
    $typeName := extractTypeFromValue(type value) getCommonSection name.
    if: typeName == #Array then: {
        $array := Array new: countValue.
        $typedResult := TypedValue(Value(ArrayValue(array)) . BasicIntrinsicTypesSingleton array).
        return: typedResult
    }.
    if: typeName == #Tuple then: {
        $tuple := Tuple new: countValue.
        $typedResult := TypedValue(Value(TupleValue(tuple)) . BasicIntrinsicTypesSingleton tuple).
        return: typedResult
    }.
    if: typeName == #String then: {
        $string := String new: countValue.
        $typedResult := TypedValue(Value(TupleValue(string)) . BasicIntrinsicTypesSingleton string).
        return: typedResult
    }.
    if: typeName == #ByteArray then: {
        $byteArray := ByteArray new: countValue.
        $typedResult := TypedValue(Value(TupleValue(byteArray)) . BasicIntrinsicTypesSingleton byteArray).
        return: typedResult
    }.

    printLine().
    printLine("TODO: ". typeName." new:").
    abort().
}.

$addUniverseIntrinsicMethod($(SymbolHashtable)methodDict $(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive.
        isMacro: false
    }))). functionType).
    methodDict at: name put: primitiveValue
}.

$addTypeUniverseIntrinsicMethods($(SysmelType)typeUniverse :: Void) := {
    $commonPart := typeUniverse getCommonSection.
    $methodDict := typeUniverse getMethodDictionary.

    addUniverseIntrinsicMethod(methodDict. #withSelector:addMethod:. universePrimitiveWithSelectorAddMethod. makeSimplePureFunctionType([typeUniverse. BasicIntrinsicTypesSingleton gradual] . BasicIntrinsicTypesSingleton voidType)).
    addUniverseIntrinsicMethod(methodDict. #new:. universePrimitiveNewWithCount. makeSimplePureFunctionType([typeUniverse. BasicIntrinsicTypesSingleton integer] . BasicIntrinsicTypesSingleton gradual)).
    void
}.
addTypeUniverseIntrinsicMethods(BasicIntrinsicTypesSingleton universe).


$integerPrimitive_bitInvert($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $argument := arguments at: 0.
    $argumentValue := argument getIntegerValue.

    $result := TypedValue(Value(IntegerValue(argumentValue bitInvert)). argument type).
    result
}.

$integerPrimitive_negated($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $argument := arguments at: 0.
    $argumentValue := argument getIntegerValue.

    $result := TypedValue(Value(IntegerValue(argumentValue negated)). argument type).
    result
}.

$integerPrimitive_add($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue + rightValue)). left type).
    result
}.
$integerPrimitive_minus($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue - rightValue)). left type).
    result
}.
$integerPrimitive_times($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue * rightValue)). left type).
    result
}.
$integerPrimitive_integerDivision($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue // rightValue)). left type).
    result
}.
$integerPrimitive_integerModulo($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue % rightValue)). left type).
    result
}.

$integerPrimitive_integerBitAnd($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue & rightValue)). left type).
    result
}.

$integerPrimitive_integerBitOr($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue | rightValue)). left type).
    result
}.

$integerPrimitive_integerBitXor($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue ^ rightValue)). left type).
    result
}.

$integerPrimitive_integerShiftLeft($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue << rightValue)). left type).
    result
}.

$integerPrimitive_integerLogicalShiftRight($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue >> rightValue)). left type).
    result
}.

$integerPrimitive_integerArithmeticShiftRight($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue >>> rightValue)). left type).
    result
}.

$integerPrimitive_equals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue = rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_notEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue ~= rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_lessThan($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue < rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_lessOrEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue <= rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_greaterThan($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue > rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_greaterOrEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue >= rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_asInteger($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $result := TypedValue(Value(IntegerValue(sourceValue)). BasicIntrinsicTypesSingleton integer).
    result
}.

$integerPrimitive_asInt8($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := (sourceValue & 16r7F) - (sourceValue & 16r80).

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton int8).
    result
}.

$integerPrimitive_asInt16($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := (sourceValue & 16r7FFF) - (sourceValue & 16r8000).

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton int16).
    result
}.

$integerPrimitive_asInt32($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := (sourceValue & 16r7FFFFFFF) - (sourceValue & 16r80000000).

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton int32).
    result
}.

$integerPrimitive_asInt64($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := (sourceValue & 16r7FFFFFFFFFFFFFFF) - (sourceValue & 16r8000000000000000).

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton int64).
    result
}.

$integerPrimitive_asUInt8($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := sourceValue & 16rFF.

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton uint8).
    result
}.

$integerPrimitive_asUInt16($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := sourceValue & 16rFFFF.

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton uint16).
    result
}.

$integerPrimitive_asUInt32($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := sourceValue & 16rFFFFFFFF.

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton uint32).
    result
}.

$integerPrimitive_asUInt64($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := sourceValue & 16rFFFFFFFFFFFFFFFF.

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton uint64).
    result
}.

$integerPrimitive_asChar8($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := sourceValue & 16rFF.

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton char8).
    result
}.

$integerPrimitive_asChar16($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := sourceValue & 16rFFFF.

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton char16).
    result
}.

$integerPrimitive_asChar32($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $sourceValue := (arguments at: 0) getIntegerValue.
    $masked := sourceValue & 16rFFFFFFFF.

    $result := TypedValue(Value(IntegerValue(masked)). BasicIntrinsicTypesSingleton char32).
    result
}.

$addIntegerIntrinsicMethod($(SymbolHashtable)methodDict $(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive.
        isMacro: false
    }))). functionType).
    methodDict at: name put: primitiveValue
}.
$addIntegerIntrinsicMethods($(SysmelType)intrinsicType :: Void) := {
    $commonPart := intrinsicType getCommonSection.
    $methodDict := intrinsicType getMethodDictionary.

    $unaryFunctionType := makeSimplePureFunctionType([intrinsicType] . intrinsicType).
    $binaryFunctionType := makeSimplePureFunctionType([intrinsicType . intrinsicType] . intrinsicType).
    $binaryComparisonFunctionType := makeSimplePureFunctionType([intrinsicType . intrinsicType] . BasicIntrinsicTypesSingleton boolean).

    addIntegerIntrinsicMethod(methodDict. #bitInvert. integerPrimitive_bitInvert. unaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #negated. integerPrimitive_negated. unaryFunctionType).

    addIntegerIntrinsicMethod(methodDict. #+. integerPrimitive_add. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #-. integerPrimitive_minus. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #"*". integerPrimitive_times. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #//. integerPrimitive_integerDivision. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #%. integerPrimitive_integerModulo. binaryFunctionType).

    addIntegerIntrinsicMethod(methodDict. #&. integerPrimitive_integerBitAnd. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #|. integerPrimitive_integerBitOr. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #^. integerPrimitive_integerBitXor. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #<<. integerPrimitive_integerShiftLeft. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #>>. integerPrimitive_integerLogicalShiftRight. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #>>>. integerPrimitive_integerArithmeticShiftRight. binaryFunctionType).

    addIntegerIntrinsicMethod(methodDict. #=. integerPrimitive_equals. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #~=. integerPrimitive_notEquals. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #<. integerPrimitive_lessThan. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #<=. integerPrimitive_lessOrEquals. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #>. integerPrimitive_greaterThan. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #>=. integerPrimitive_greaterOrEquals. binaryComparisonFunctionType).

    addIntegerIntrinsicMethod(methodDict. #asInteger. integerPrimitive_asInteger.  makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton integer)).

    addIntegerIntrinsicMethod(methodDict. #asInt8.  integerPrimitive_asInt8.  makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton int8)).
    addIntegerIntrinsicMethod(methodDict. #asInt16. integerPrimitive_asInt16. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton int16)).
    addIntegerIntrinsicMethod(methodDict. #asInt32. integerPrimitive_asInt32. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton int32)).
    addIntegerIntrinsicMethod(methodDict. #asInt64. integerPrimitive_asInt64. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton int64)).

    addIntegerIntrinsicMethod(methodDict. #asUInt8.  integerPrimitive_asUInt8.  makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton uint8)).
    addIntegerIntrinsicMethod(methodDict. #asUInt16. integerPrimitive_asUInt16. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton uint16)).
    addIntegerIntrinsicMethod(methodDict. #asUInt32. integerPrimitive_asUInt32. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton uint32)).
    addIntegerIntrinsicMethod(methodDict. #asUInt64. integerPrimitive_asUInt64. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton uint64)).

    addIntegerIntrinsicMethod(methodDict. #asChar8.  integerPrimitive_asChar8.  makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton char8)).
    addIntegerIntrinsicMethod(methodDict. #asChar16. integerPrimitive_asChar16. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton char16)).
    addIntegerIntrinsicMethod(methodDict. #asChar32. integerPrimitive_asChar32. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton char32)).

    void
}.


addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton integer).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton character).

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int8).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int16).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int32).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int64).

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint8).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint16).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint32).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint64).

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton char8).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton char16).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton char32).

$addIntegerIntrinsicConversionSuffixes($(SysmelType)intrinsicType :: Void) := {
    $commonPart := intrinsicType getCommonSection.
    $methodDict := intrinsicType getMethodDictionary.

    addIntegerIntrinsicMethod(methodDict. #i8.  integerPrimitive_asInt8.  makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton int8)).
    addIntegerIntrinsicMethod(methodDict. #i16. integerPrimitive_asInt16. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton int16)).
    addIntegerIntrinsicMethod(methodDict. #i32. integerPrimitive_asInt32. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton int32)).
    addIntegerIntrinsicMethod(methodDict. #i64. integerPrimitive_asInt64. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton int64)).

    addIntegerIntrinsicMethod(methodDict. #u8.  integerPrimitive_asUInt8.  makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton uint8)).
    addIntegerIntrinsicMethod(methodDict. #u16. integerPrimitive_asUInt16. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton uint16)).
    addIntegerIntrinsicMethod(methodDict. #u32. integerPrimitive_asUInt32. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton uint32)).
    addIntegerIntrinsicMethod(methodDict. #u64. integerPrimitive_asUInt64. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton uint64)).

    addIntegerIntrinsicMethod(methodDict. #c8.  integerPrimitive_asChar8.  makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton char8)).
    addIntegerIntrinsicMethod(methodDict. #c16. integerPrimitive_asChar16. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton char16)).
    addIntegerIntrinsicMethod(methodDict. #c32. integerPrimitive_asChar32. makeSimplePureFunctionType([intrinsicType] . BasicIntrinsicTypesSingleton char32)).
}.

addIntegerIntrinsicConversionSuffixes(BasicIntrinsicTypesSingleton integer).
addIntegerIntrinsicConversionSuffixes(BasicIntrinsicTypesSingleton character).

$addIntrinsicMethod($(SymbolHashtable)methodDict $(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive.
        isMacro: false
    }))). functionType).
    methodDict at: name put: primitiveValue
}.

$stringPrimitive_concatenate($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $right := arguments at: 1.

    $leftString := extractStringFromValue(left value).
    $rightString := extractStringFromValue(right value).
    $result := leftString -- rightString.
    TypedValue(Value(StringValue(result)). BasicIntrinsicTypesSingleton array)
}.

$stringPrimitive_size($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $string := arguments at: 0.
    $stringValue := extractStringFromValue(string value).
    TypedValue(Value(IntegerValue(stringValue size)). BasicIntrinsicTypesSingleton integer)
}.

$stringPrimitive_at($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $string := arguments at: 0.
    $stringValue := extractStringFromValue(string value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= stringValue size then: {
        printLine("Index ". indexValue . " is out bounds.").
        abort().
    }.
    $character := stringValue at: indexValue.
    TypedValue(Value(CharacterValue(character)). BasicIntrinsicTypesSingleton character)
}.

$addStringPrimitives() := {
    $stringType := BasicIntrinsicTypesSingleton string.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $characterType := BasicIntrinsicTypesSingleton character.
    $commonPart := stringType getCommonSection.
    $methodDict := stringType getMethodDictionary.
    
    addIntrinsicMethod(methodDict. #--. stringPrimitive_concatenate . makeSimplePureFunctionType([stringType . stringType]. stringType)).
    addIntrinsicMethod(methodDict. #size. stringPrimitive_size . makeSimplePureFunctionType([stringType]. integerType)).
    addIntrinsicMethod(methodDict. #at:. stringPrimitive_at . makeSimplePureFunctionType([stringType . integerType]. characterType)).
}.

addStringPrimitives().

$arrayPrimitive_concatenate($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $right := arguments at: 1.

    $leftArray := extractArrayFromValue(left value).
    $rightArray := extractArrayFromValue(right value).
    $result := leftArray -- rightArray.
    TypedValue(Value(ArrayValue(result)). BasicIntrinsicTypesSingleton array).
}.

$arrayPrimitive_size($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedArray := arguments at: 0.

    $array := extractArrayFromValue(typedArray value).
    TypedValue(Value(IntegerValue(array size)). BasicIntrinsicTypesSingleton integer).
}.

$arrayPrimitive_at($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $array := arguments at: 0.
    $arrayValue := extractArrayFromValue(array value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= arrayValue size then: {
        printLine("Index ". indexValue . " is out bounds.").
        abort().
    }.
    $element := arrayValue at: indexValue.
    element
}.

$arrayPrimitive_atPut($(Array)arguments :: TypedValue) := {
    assert: arguments size = 3.
    $array := arguments at: 0.
    $arrayValue := extractArrayFromValue(array value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= arrayValue size then: {
        printLine("Index ". indexValue . " is out bounds.").
        abort().
    }.
    $element := arguments at: 2.
    arrayValue at: indexValue put: element.
    element
}.

$addArrayPrimitives() := {
    $arrayType := BasicIntrinsicTypesSingleton array.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $gradualType := BasicIntrinsicTypesSingleton gradual.
    $commonPart := arrayType getCommonSection.
    $methodDict := arrayType getMethodDictionary.
    
    addIntrinsicMethod(methodDict. #--. arrayPrimitive_concatenate . makeSimplePureFunctionType([arrayType . arrayType]. arrayType)).
    addIntrinsicMethod(methodDict. #size. arrayPrimitive_size . makeSimplePureFunctionType([arrayType]. integerType)).
    addIntrinsicMethod(methodDict. #at:. arrayPrimitive_at . makeSimplePureFunctionType([arrayType . integerType]. gradualType)).
    addIntrinsicMethod(methodDict. #at:put:. arrayPrimitive_atPut . makeSimpleFunctionType([arrayType . integerType. gradualType]. gradualType)).
}.
addArrayPrimitives().

$tuplePrimitive_size($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedTuple := arguments at: 0.

    $tuple := extractTupleFromValue(typedTuple value).
    TypedValue(Value(IntegerValue(tuple size)). BasicIntrinsicTypesSingleton integer).
}.

$tuplePrimitive_at($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $tuple := arguments at: 0.
    $tupleValue := extractTupleFromValue(tuple value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= tupleValue size then: {
        printLine("Index ". indexValue . " is out bounds.").
        abort().
    }.
    $element := tupleValue at: indexValue.
    element
}.

$addTuplePrimitives() := {
    $tupleType := BasicIntrinsicTypesSingleton tuple.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $gradualType := BasicIntrinsicTypesSingleton gradual.
    $commonPart := tupleType getCommonSection.
    $methodDict := tupleType getMethodDictionary.
    
    addIntrinsicMethod(methodDict. #size. tuplePrimitive_size . makeSimplePureFunctionType([tupleType]. integerType)).
    addIntrinsicMethod(methodDict. #at:. tuplePrimitive_at . makeSimplePureFunctionType([tupleType . integerType]. gradualType)).
}.
addTuplePrimitives().

$associationPrimitive_key($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedAssociation := arguments at: 0.

    $assoc := extractAssociationFromValue(typedAssociation value).
    TypedValue(Value(GradualValue(assoc key)). BasicIntrinsicTypesSingleton gradual)
}.

$associationPrimitive_value($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedAssociation := arguments at: 0.

    $assoc := extractAssociationFromValue(typedAssociation value).
    TypedValue(Value(GradualValue(assoc value)). BasicIntrinsicTypesSingleton gradual)
}.

$addAssociationPrimitives() := {
    $associationType := BasicIntrinsicTypesSingleton association.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $gradualType := BasicIntrinsicTypesSingleton gradual.
    $commonPart := associationType getCommonSection.
    $methodDict := associationType getMethodDictionary.
    
    addIntrinsicMethod(methodDict. #key. associationPrimitive_key . makeSimplePureFunctionType([associationType]. gradualType)).
    addIntrinsicMethod(methodDict. #value. associationPrimitive_value . makeSimplePureFunctionType([associationType]. gradualType)).
}.
addAssociationPrimitives().

$immutableDictPrimitive_size($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedDict := arguments at: 0.

    $dict := extractImmutableDictionaryFromValue(typedDict value).
    TypedValue(Value(IntegerValue(typedDict size)). BasicIntrinsicTypesSingleton integer).
}.

$immutableDictPrimitive_associationAt($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $typedDict := arguments at: 0.
    $dict := extractImmutableDictionaryFromValue(typedDict value).
    $index := arguments at: 1.
    $indexValue := extractIntegerFromValue(index value).
    if: indexValue >= dict size then: {
        printLine("Index ". indexValue . " is out bounds.").
        abort().
    }.
    $association := dict associationAt: indexValue.
    TypedValue(Value(AssociationValue(association)). BasicIntrinsicTypesSingleton integer)
}.

$immutableDictPrimitive_includesKey($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $typedDict := arguments at: 0.
    $dict := extractImmutableDictionaryFromValue(typedDict value).
    $key := extractValueForAnalysis((arguments at: 1) value).
    $!result := false.
    $associationCount := dict size.

    $!i := 0. while: (i < associationCount) do: {
        $assoc := dict associationAt: i.
        $assocKey := extractValueForAnalysis(assoc key).
        if: assocKey == key then: {
            return: TypedValue(Value(BooleanValue(true)) . BasicIntrinsicTypesSingleton boolean )
        }
    } continueWith: (i := i +1).
    TypedValue(Value(BooleanValue(false)) . BasicIntrinsicTypesSingleton boolean )
}.

$immutableDictPrimitive_at($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $typedDict := arguments at: 0.
    $dict := extractImmutableDictionaryFromValue(typedDict value).
    $key := extractValueForAnalysis((arguments at: 1) value).
    $!result := false.
    $associationCount := dict size.
    ##printLine("associationCount ". associationCount).
    $!i := 0. while: (i < associationCount) do: {
        $assoc := dict associationAt: i.
        $assocKey := extractValueForAnalysis(assoc key).
        if: assocKey == key then: {
            ##printLine("Found value " . assoc value).
            return: TypedValue(assoc value. BasicIntrinsicTypesSingleton gradual)
        }
    } continueWith: (i := i +1).

    printLine("Requested key is not present in dictionary.").
    abort()
}.

$addImmutableDictionaryPrimitives() := {
    $dictType := BasicIntrinsicTypesSingleton immutableDictionary.
    $associationType := BasicIntrinsicTypesSingleton association.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $gradualType := BasicIntrinsicTypesSingleton gradual.
    $booleanType := BasicIntrinsicTypesSingleton boolean.
    $commonPart := dictType getCommonSection.
    $methodDict := dictType getMethodDictionary.
    
    addIntrinsicMethod(methodDict. #size. immutableDictPrimitive_size . makeSimplePureFunctionType([dictType]. integerType)).
    addIntrinsicMethod(methodDict. #associationAt:. immutableDictPrimitive_associationAt . makeSimplePureFunctionType([dictType . integerType]. associationType)).
    addIntrinsicMethod(methodDict. #includesKey:. immutableDictPrimitive_includesKey . makeSimplePureFunctionType([dictType . gradualType]. booleanType)).
    addIntrinsicMethod(methodDict. #at:. immutableDictPrimitive_at . makeSimplePureFunctionType([dictType . gradualType]. gradualType)).
}.
addImmutableDictionaryPrimitives().

$symbolPrimitive_identityEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    if: (arguments at: 1) isNull then: {
        $comparisonResult := false.
        return: TypedValue(Value(BooleanValue(comparisonResult)). BasicIntrinsicTypesSingleton boolean)
    }
    else:
    {
        $firstSymbol := extractSymbolFromValue((arguments at: 0) value).
        $secondSymbol := extractSymbolFromValue((arguments at: 1) value).
        $comparisonResult := firstSymbol == secondSymbol.
        return: TypedValue(Value(BooleanValue(comparisonResult)). BasicIntrinsicTypesSingleton boolean)
    }
}.

$symbolPrimitive_identityNotEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    if: (arguments at: 1) isNull then: {
        $comparisonResult := true.
        return: TypedValue(Value(BooleanValue(comparisonResult)). BasicIntrinsicTypesSingleton boolean)
    }
    else:
    {
        $firstSymbol := extractSymbolFromValue((arguments at: 0) value).
        $secondSymbol := extractSymbolFromValue((arguments at: 1) value).
        $comparisonResult := firstSymbol ~~ secondSymbol.
        return: TypedValue(Value(BooleanValue(comparisonResult)). BasicIntrinsicTypesSingleton boolean)
    }

}.

$symbolPrimitive_hash($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedSymbol := extractSymbolFromValue((arguments at: 0) value).
    $hashValue := typedSymbol hash.
    return: TypedValue(Value(IntegerValue(hashValue)). BasicIntrinsicTypesSingleton integer)
}.

$addSymbolPrimitives() := {
    $symbolType := BasicIntrinsicTypesSingleton symbol.
    $booleanType := BasicIntrinsicTypesSingleton boolean.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $commonPart := symbolType getCommonSection.
    $methodDict := symbolType getMethodDictionary.
    
    addIntrinsicMethod(methodDict. #==. symbolPrimitive_identityEquals . makeSimplePureFunctionType([symbolType. symbolType]. booleanType)).
    addIntrinsicMethod(methodDict. #~~. symbolPrimitive_identityNotEquals . makeSimplePureFunctionType([symbolType. symbolType]. booleanType)).
    addIntrinsicMethod(methodDict. #hash. symbolPrimitive_hash . makeSimplePureFunctionType([symbolType]. integerType)).
}.
addSymbolPrimitives().

$gradualPrimitive_identityEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    if: (arguments at: 1) isNull then: {
        $comparisonResult := false.
        return: TypedValue(Value(BooleanValue(comparisonResult)). BasicIntrinsicTypesSingleton boolean)
    }
    else:
    {
        $firstValue := extractGradualFromValue((arguments at: 0) value).
        $secondValue := extractGradualFromValue((arguments at: 1) value).
        $comparisonResult := firstValue == secondValue.
        return: TypedValue(Value(BooleanValue(comparisonResult)). BasicIntrinsicTypesSingleton boolean)
    }
}.

$gradualPrimitive_identityNotEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    assert: arguments size = 2.
    if: (arguments at: 1) isNull then: {
        $comparisonResult := false.
        return: TypedValue(Value(BooleanValue(comparisonResult)). BasicIntrinsicTypesSingleton boolean)
    }
    else:
    {
        $firstValue := extractGradualFromValue((arguments at: 0) value).
        $secondValue := extractGradualFromValue((arguments at: 1) value).
        $comparisonResult := firstValue ~~ secondValue.
        return: TypedValue(Value(BooleanValue(comparisonResult)). BasicIntrinsicTypesSingleton boolean)
    }
}.

$gradualPrimitive_identityHash($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $typedSymbol := extractSymbolFromValue((arguments at: 0) value).
    $hashValue := typedSymbol hash.
    return: TypedValue(Value(IntegerValue(hashValue)). BasicIntrinsicTypesSingleton integer)
}.

$addGradualPrimitives() := {
    $gradualType := BasicIntrinsicTypesSingleton gradual.
    $booleanType := BasicIntrinsicTypesSingleton boolean.
    $integerType := BasicIntrinsicTypesSingleton integer.
    $commonPart := gradualType getCommonSection.
    $methodDict := gradualType getMethodDictionary.
    
    addIntrinsicMethod(methodDict. #==. gradualPrimitive_identityEquals . makeSimplePureFunctionType([gradualType. gradualType]. booleanType)).
    addIntrinsicMethod(methodDict. #~~. gradualPrimitive_identityNotEquals . makeSimplePureFunctionType([gradualType. gradualType]. booleanType)).
    addIntrinsicMethod(methodDict. #identityHash. gradualPrimitive_identityHash . makeSimplePureFunctionType([gradualType]. integerType)).
}.
addGradualPrimitives().

public: [
    $getBasicIntrinsicTypes(:: BasicIntrinsicTypes) := BasicIntrinsicTypesSingleton.
    $getDefaultIntrinsicsEnvironment(:: Environment) := Environment(DefaultIntrinsicsEnvironment).

    $instantiateTypeWithArguments($(SysmelType)typeToInstantiate $(Array)arguments :: TypedValue) := 
    {
        match: typeToInstantiate ofType: SysmelType withPatterns: #{
            $(SysmelTupleAndRecordType) tupleAndRecord : {
                $tupleSize := tupleAndRecord fields size.
                $tuple := Tuple new: tupleSize.
                $record := Record#{
                    type: typeToInstantiate.
                    tuple: tuple.
                }.
                if: arguments size = 0 then: {
                    $methodDict := typeToInstantiate getMethodDictionary.
                    if: (methodDict includesKey: #initialize) then: {
                        $initializeMethod := methodDict at: #initialize.
                        ##printLine().
                        ##printLine("initializeMethod ". initializeMethod).
                        ##printLine().
                        $initializeFunctionValue := extractFunctionFromValue(initializeMethod value).
                        ##printLine("initializeFunctionValue ". initializeFunctionValue).
                        $typedRecord := TypedValue(Value(RecordValue(record)). typeToInstantiate).
                        $invocationArguments := [typedRecord].
                        ##printLine(invocationArguments).
                        match: initializeFunctionValue ofType: SysmelFunction withPatterns: #{
                        $(SysmelIntrinsicPrimitive)intrinsic : {
                            intrinsic implementation(invocationArguments).
                            return: typedRecord
                        }.
                        $(SysmelCompiledFunction)compiledFunction : {
                            (compiledFunction midIR evaluateWithArguments: invocationArguments).
                            return: typedRecord
                        }.
                        _: {
                            printLine("Unsupported method function kind. " . initializeFunctionValue).
                            abort()
                        }
                    }.
                        ##initializeFunctionValue(record)
                        ##initializeMethod(record)
                    }
                }.

                if: (arguments size = 1 && isValueWithImmutableDictionaryFromValue((arguments at: 0) value)) then: {
                    $dictionary := extractImmutableDictionaryFromValue((arguments at: 0) value).
                    if: dictionary size > tupleSize then: {
                        printLine("Dictionary has more elements than the record.")
                    }.

                    $!i := 0. while: i < dictionary size do: {
                        $association := dictionary associationAt: i.
                        $fieldName := extractSymbolFromValue(association key).
                        $fieldIndex := findIndexOfRecordFieldWithName(tupleAndRecord. fieldName).
                        if: fieldIndex < 0 then: {
                            printLine("Record does not have a field name ". fieldName)
                        }.

                        tuple at: fieldIndex put: association value
                    } continueWith:(i := i + 1).

                    $result := TypedValue(Value(RecordValue(record)). typeToInstantiate).
                    return: result
                }.

                if: (arguments size > tupleSize) then:
                {
                    printLine("Excessive number of paramters to construct record.").
                    abort().
                }.

                $!i := 0. while: (i < arguments size) do: {

                    tuple at: i put: (arguments at: i)
                } continueWith: (i := i + 1).

                $result := TypedValue(Value(RecordValue(record)). typeToInstantiate).
                return: result
            }.
            $(SysmelClassType) clazzType : {
                $objectSize := clazzType superFieldCount + clazzType fields size .
                $tuple := Tuple new: objectSize.
                $object := Object#{
                    class: clazzType.
                    tuple: tuple.
                }.

                if: (arguments size = 1 && isValueWithImmutableDictionaryFromValue((arguments at: 0) value)) then: {
                    $dictionary := extractImmutableDictionaryFromValue((arguments at: 0) value).
                    if: dictionary size > objectSize then: {
                        printLine("Dictionary has more elements than the object fields.")
                    }.

                    $!i := 0. while: i < dictionary size do: {
                        $association := dictionary associationAt: i.
                        $fieldName := extractSymbolFromValue(association key).
                        $fieldIndex := findIndexOfClassFieldWithName(clazzType. fieldName).
                        if: fieldIndex < 0 then: {
                            printLine("Object does not have a field named ". fieldName)
                        }.

                        tuple at: fieldIndex put: association value
                    } continueWith:(i := i + 1).

                    $result := TypedValue(Value(ObjectValue(object)). typeToInstantiate).
                    return: result
                }.

                if: (arguments size > objectSize) then:
                {
                    printLine("Excessive number of paramters to construct object.").
                    abort().
                }.

                $!i := 0. while: (i < arguments size) do: {

                    tuple at: i put: (arguments at: i)
                } continueWith: (i := i + 1).

                $result := TypedValue(Value(ObjectValue(object)). typeToInstantiate).
                return: result
            }.
            $(SysmelSumType) sumType : {
                if: (arguments size ~= 1) then:
                {
                    printLine("Sum types can only be instantiated with a single argument.").
                    abort().
                }.

                $singleArgument := arguments at: 0.
                $singleArgumentType := singleArgument type.
                $!i := 0. while: (i < sumType alternativeCount) do: {
                    $sumTypeAlternative := sumType alternatives at: i.
                    if: singleArgumentType == sumTypeAlternative then: {
                        $sumValue := TypedValue(Value(SumValue(i. singleArgument value)) . sumType).
                        return: sumValue
                    }
                } continueWith: (i := i + 1).
                
                printLine("Cannot find alternative for sum-type.").
                abort().
            }.
            _: {
                printLine("Unsupported instantiation of type: ". typeToInstantiate).
            }
        }.
        printLine("TODO: instantiateTypeWithArguments: ". typeToInstantiate).
        abort()
    }.

    SysmelType
        withSelector: #lookupSelector: addMethod: {
            | $(SysmelType)self $(Symbol)selector :: TypedValue |
            $commonSection := self getCommonSection.
            if: (commonSection methodDict includesKey: selector) then: {
                return: (commonSection methodDict at: selector)
            }.

            $supertype := self getSupertype.
            if: null ~~ supertype then: {
                return: (supertype lookupSelector: selector)
            }.

            TypedValue(Value(InvalidErrorValue("Failed to find selector.")). getBasicIntrinsicTypes() null).
        }.
].
}