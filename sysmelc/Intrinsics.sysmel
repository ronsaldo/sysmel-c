namespace: SysmelC definition: {
$DefaultIntrinsicsEnvironment := IntrinsicsEnvironment#{
    parent: Environment(EmptyEnvironment()).
    localSymbols: SymbolHashtable().
}.

public: [
    Record: BasicIntrinsicTypes withFields: #{
        null: SysmelType.
        voidType: SysmelType.
        boolean: SysmelType.
        integer: SysmelType.
        float: SysmelType.
        character: SysmelType.
        gradual: SysmelType.
        string: SysmelType.
        symbol: SysmelType.
        array: SysmelType.
        tuple: SysmelType.
        byteArray: SysmelType.
        association: SysmelType.
        immutableDictionary: SysmelType.
        function: SysmelType.
        universe: SysmelType.

        uint8:  SysmelType.
        uint16: SysmelType.
        uint32: SysmelType.
        uint64: SysmelType.

        int8:  SysmelType.
        int16: SysmelType.
        int32: SysmelType.
        int64: SysmelType.

        char8:  SysmelType.
        char16: SysmelType.
        char32: SysmelType.

        float32: SysmelType.
        float64: SysmelType.
    }
].

$BasicIntrinsicTypesSingleton := BasicIntrinsicTypes#{
    null: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Null.  isValueType: true. valueAlignment: 0u8. valueSize: 0u8. heapAlignment: 0u8. heapSize: 0u8. methodDict: SymbolHashtable().
    })).
    voidType: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Void.  isValueType: true. valueAlignment: 0u8. valueSize: 0u8. heapAlignment: 0u8. heapSize: 0u8. methodDict: SymbolHashtable().
    })).
    boolean: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Boolean. isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    integer: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Integer. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    float: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Float. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    character: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Character. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    string: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #String. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    symbol: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Symbol. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    array: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Array. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    tuple: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Tuple. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    byteArray: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #ByteArray. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    association: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Association. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    immutableDictionary: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #ImmutableDictionary. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    function: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Function. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    universe: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #TypeUniverse. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
    gradual: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Gradual. isValueType: false. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).

    uint8: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt8.  printingSuffix: #u8.  isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    uint16: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt16. printingSuffix: #u16. isValueType: true. valueAlignment: 2u8. valueSize: 2u8. heapAlignment: 2u8. heapSize: 2u8. methodDict: SymbolHashtable().
    })).
    uint32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt32. printingSuffix: #u32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).
    uint64: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #UInt64. printingSuffix: #u64. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).

    int8: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int8.  printingSuffix: #i8.  isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    int16: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int16. printingSuffix: #i16. isValueType: true. valueAlignment: 2u8. valueSize: 2u8. heapAlignment: 2u8. heapSize: 2u8. methodDict: SymbolHashtable().
    })).
    int32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int32. printingSuffix: #i32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).
    int64: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Int64. printingSuffix: #i64. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).

    char8: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Char8.  printingSuffix: #c8.  isValueType: true. valueAlignment: 1u8. valueSize: 1u8. heapAlignment: 1u8. heapSize: 1u8. methodDict: SymbolHashtable().
    })).
    char16: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Char16. printingSuffix: #c16. isValueType: true. valueAlignment: 2u8. valueSize: 2u8. heapAlignment: 2u8. heapSize: 2u8. methodDict: SymbolHashtable().
    })).
    char32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Char32. printingSuffix: #c32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).

    float32: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Float32. printingSuffix: #f32. isValueType: true. valueAlignment: 4u8. valueSize: 4u8. heapAlignment: 4u8. heapSize: 4u8. methodDict: SymbolHashtable().
    })).
    float64: SysmelType(SysmelBasicType(SysmelTypeCommon#{
        name: #Float64. printingSuffix: #f64. isValueType: true. valueAlignment: 8u8. valueSize: 8u8. heapAlignment: 8u8. heapSize: 8u8. methodDict: SymbolHashtable().
    })).
}.

IntrinsicsEnvironment
    withSelector: #addType: addMethod: {
        |$(IntrinsicsEnvironment)self $(SysmelType)type :: Void |
        match: type ofType: SysmelType withPatterns: #{
            $(SysmelBasicType)basicType : {
                self localSymbols at: basicType common name put: TypedValue(Value(SysmelTypeValue(type)). BasicIntrinsicTypesSingleton universe)
            }.
            _: {
                printLine("Missing support for type ". type)
            }
        }.
        void
    }.
    

DefaultIntrinsicsEnvironment
    addType: BasicIntrinsicTypesSingleton null;
    addType: BasicIntrinsicTypesSingleton boolean;
    addType: BasicIntrinsicTypesSingleton integer;
    addType: BasicIntrinsicTypesSingleton character;
    addType: BasicIntrinsicTypesSingleton float;
    addType: BasicIntrinsicTypesSingleton string;
    addType: BasicIntrinsicTypesSingleton symbol;
    addType: BasicIntrinsicTypesSingleton array;
    addType: BasicIntrinsicTypesSingleton tuple;
    addType: BasicIntrinsicTypesSingleton byteArray;
    addType: BasicIntrinsicTypesSingleton association;
    addType: BasicIntrinsicTypesSingleton immutableDictionary;
    addType: BasicIntrinsicTypesSingleton universe;

    addType: BasicIntrinsicTypesSingleton gradual;
        
    addType: BasicIntrinsicTypesSingleton int8;
    addType: BasicIntrinsicTypesSingleton int16;
    addType: BasicIntrinsicTypesSingleton int32;
    addType: BasicIntrinsicTypesSingleton int64;

    addType: BasicIntrinsicTypesSingleton uint8;
    addType: BasicIntrinsicTypesSingleton uint16;
    addType: BasicIntrinsicTypesSingleton uint32;
    addType: BasicIntrinsicTypesSingleton uint64;

    addType: BasicIntrinsicTypesSingleton char8;
    addType: BasicIntrinsicTypesSingleton char16;
    addType: BasicIntrinsicTypesSingleton char32;

    addType: BasicIntrinsicTypesSingleton float32;
    addType: BasicIntrinsicTypesSingleton float64.

$addGlobalIntrinsicMethod($(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive.
        isMacro: false
    }))). functionType).
    DefaultIntrinsicsEnvironment localSymbols at: name put: primitiveValue
}.

$addGlobalMacroIntrinsicMethod($(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive.
        isMacro: true
    }))). functionType).
    DefaultIntrinsicsEnvironment localSymbols at: name put: primitiveValue
}.

$primitive_print($(Array) arguments :: Void) := {
    $!i := 0.
    while: i < arguments size do: {
        print(extractValueForPrinting((arguments at: i) value))
    } continueWith: (i := i + 1).
    void
}.

$primitive_printLine($(Array) arguments :: Void) := {
    primitive_print(arguments).
    printLine().
    void
}.

addGlobalIntrinsicMethod(#print. primitive_print.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: false.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: true.
        argumentTypes: [BasicIntrinsicTypesSingleton array].
        resultType: BasicIntrinsicTypesSingleton voidType.
    })
).

addGlobalIntrinsicMethod(#printLine. primitive_printLine.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: true.
        argumentTypes: [BasicIntrinsicTypesSingleton array].
        resultType: BasicIntrinsicTypesSingleton voidType.
    })
).

$primitive_ifThenElse_Macro($(MacroContext)context $(Array)arguments :: ParseTreeNode) := {
    assert: arguments size = 3.
    ParseTreeNode(ParseTreeIfSelectionNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        trueExpression: (arguments at: 1).
        falseExpression: (arguments at: 2).
    }).
}.

$primitive_ifThen_Macro($(MacroContext)context $(Array)arguments :: ParseTreeNode) := {
    assert: arguments size = 2.
    ParseTreeNode(ParseTreeIfSelectionNode#{
        sourcePosition: context sourcePosition.
        condition: (arguments at: 0).
        trueExpression: (arguments at: 1).
    }).
}.

addGlobalMacroIntrinsicMethod(#if:then:else:. primitive_ifThenElse_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: true.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

addGlobalMacroIntrinsicMethod(#if:then:. primitive_ifThen_Macro.
    SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: false.
        isVariadic: true.
        argumentTypes: [MacroContext . BasicIntrinsicTypesSingleton array].
        resultType: ParseTreeNode.
    })
).

$integerPrimitive_bitInvert($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $argument := arguments at: 0.
    $argumentValue := argument getIntegerValue.

    $result := TypedValue(Value(IntegerValue(argumentValue bitInvert)). argument type).
    result
}.

$integerPrimitive_negated($(Array)arguments :: TypedValue) := {
    assert: arguments size = 1.
    $argument := arguments at: 0.
    $argumentValue := argument getIntegerValue.

    $result := TypedValue(Value(IntegerValue(argumentValue negated)). argument type).
    result
}.

$integerPrimitive_add($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue + rightValue)). left type).
    result
}.
$integerPrimitive_minus($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue - rightValue)). left type).
    result
}.
$integerPrimitive_times($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue * rightValue)). left type).
    result
}.
$integerPrimitive_integerDivision($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue // rightValue)). left type).
    result
}.
$integerPrimitive_integerModulo($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(IntegerValue(leftValue % rightValue)). left type).
    result
}.

$integerPrimitive_equals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue = rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_notEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue ~= rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_lessThan($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue < rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_lessOrEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue <= rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_greaterThan($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue > rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$integerPrimitive_greaterOrEquals($(Array)arguments :: TypedValue) := {
    assert: arguments size = 2.
    $left := arguments at: 0.
    $leftValue := left getIntegerValue.
    $rightValue := (arguments at: 1) getIntegerValue.

    $result := TypedValue(Value(BooleanValue(leftValue >= rightValue)). BasicIntrinsicTypesSingleton boolean).
    result
}.

$addIntegerIntrinsicMethod($(SymbolHashtable)methodDict $(Symbol)name $(Function)primitive $(SysmelType)functionType :: Void) := {
    $primitiveValue := TypedValue(Value(SysmelFunctionValue(SysmelFunction(SysmelIntrinsicPrimitive#{
        name: name.
        implementation: primitive
    }))). functionType).
    methodDict at: name put: primitiveValue
}.
$addIntegerIntrinsicMethods($(SysmelType)intrinsicType :: Void) := {
    $commonPart := intrinsicType getCommonSection.
    $methodDict := commonPart methodDict.

    $unaryFunctionType := SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: true.
        argumentTypes: [intrinsicType].
        resultType: intrinsicType.
    }).

    $binaryFunctionType := SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: true.
        argumentTypes: [intrinsicType . intrinsicType].
        resultType: intrinsicType.
    }).

    $binaryComparisonFunctionType := SysmelType(SysmelSimpleFunctionType#{
        common: SysmelTypeCommon#{
            isValueType: true.
            valueAlignment: 8u32.
            valueSize: 8u32.
            heapAlignment: 8u32.
            heapSize: 8u32.
            methodDict: SymbolHashtable().
        }.
        isCompileTimePure: true.
        argumentTypes: [intrinsicType . intrinsicType].
        resultType: BasicIntrinsicTypesSingleton boolean.
    }).

    addIntegerIntrinsicMethod(methodDict. #bitInvert. integerPrimitive_bitInvert. unaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #negated. integerPrimitive_negated. unaryFunctionType).

    addIntegerIntrinsicMethod(methodDict. #+. integerPrimitive_add. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #-. integerPrimitive_minus. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #"*". integerPrimitive_times. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #//. integerPrimitive_integerDivision. binaryFunctionType).
    addIntegerIntrinsicMethod(methodDict. #%. integerPrimitive_integerModulo. binaryFunctionType).

    addIntegerIntrinsicMethod(methodDict. #=. integerPrimitive_equals. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #~=. integerPrimitive_notEquals. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #<. integerPrimitive_lessThan. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #<=. integerPrimitive_lessOrEquals. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #>. integerPrimitive_greaterThan. binaryComparisonFunctionType).
    addIntegerIntrinsicMethod(methodDict. #>=. integerPrimitive_greaterOrEquals. binaryComparisonFunctionType).

    void
}.

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton integer).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton character).

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int8).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int16).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int32).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton int64).

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint8).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint16).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint32).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton uint64).

addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton char8).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton char16).
addIntegerIntrinsicMethods(BasicIntrinsicTypesSingleton char32).
public: [
    $getBasicIntrinsicTypes(:: BasicIntrinsicTypes) := BasicIntrinsicTypesSingleton.
    $getDefaultIntrinsicsEnvironment(:: Environment) := Environment(DefaultIntrinsicsEnvironment).

    SysmelType
        withSelector: #lookupSelector: addMethod: {
            | $(SysmelType)self $(Symbol)selector :: TypedValue |
            $commonSection := self getCommonSection.
            if: (commonSection methodDict includesKey: selector) then: {
                return: (commonSection methodDict at: selector)
            }.

            $supertype := self getSupertype.
            if: supertype ~~ null then: {
                return: (supertype lookupSelector: selector)
            }.

            TypedValue(Value(InvalidErrorValue("Failed to find selector.")). getBasicIntrinsicTypes() null).
        }.
].
}