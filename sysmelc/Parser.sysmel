namespace: SysmelC definition: {
public: [
    Record: ParserState withFields: #{
        sourceCode: SourceCode.
        tokenCount: UInt32.
        tokens: Array.
        position: UInt32.
    }.

    ParserState
        withSelector: #atEnd addMethod: {|$(ParserState)self :: Boolean|
            self position >= self tokenCount
        };
        withSelector: #peekKind: addMethod: {|$(ParserState)self $(UInt32)offset :: asUInt8 |
            $peekPosition := self position + offset.
            if: peekPosition < self tokenCount then: {
                (self tokens at: peekPosition) kind asUInt8
            }
            else: {
                TokenKind EndOfSource
            }
        };
        withSelector: #peekKind addMethod: {|$(ParserState)self :: asUInt8 |
            self peekKind: 0u32
        };
        withSelector: #peek: addMethod: {|$(ParserState)self $(UInt32)offset :: asUInt8 |
            $peekPosition := self position + offset.
            if: peekPosition < self tokenCount then: {
                self tokens at: peekPosition
            }
            else: {
                TokenKind EndOfSource
            }
        };
        withSelector: #peek addMethod: {|$(ParserState)self :: asUInt8 |
            self peek: 0u32
        };
        withSelector: #advance addMethod: {|$(ParserState)self :: Void |
            assert: self position < self tokenCount.
            self position: self position + 1u32.
            void
        };
        withSelector: #next addMethod: {|$(ParserState)self :: ScannerToken |
            assert: self position < self tokenCount.
            $token := self tokens at: self position.
            self position: self position + 1u32.
            token
        };
        withSelector: #memento addMethod: {|$(ParserState)self :: UInt32 |
            self position
        };
        withSelector: #restoreMemento addMethod: {|$(ParserState)self $(UInt32)memento :: UInt32 |
            self position: memento
        };
        withSelector: #previousSourcePosition addMethod: {|$(ParserState)self :: SourcePosition |
            assert: self position > 0.
            (self tokens at: self position - 1u32) sourcePosition
        };
        withSelector: #currentSourcePosition addMethod: {|$(ParserState)self :: SourcePosition |
            if: self position < self tokenCount then: {
                return: (self tokens at: self position) sourcePosition
            }.

            assert: self tokenCount > 0.
            return: (self tokens at: self tokenCount - 1) sourcePosition
        };
        withSelector: #sourcePositionFrom: addMethod: {|$(ParserState)self $(UInt32)startingPosition :: SourcePosition |
            assert: startingPosition < self tokenCount.
            $startSourcePosition := (self tokens at: startingPosition) sourcePosition.
            
            if: self position > 0u32 then: {
                $endSourcePosition := self previousSourcePosition.
                startSourcePosition to: endSourcePosition
            } else: {
                $endSourcePosition := self currentSourcePosition.
                startSourcePosition until: endSourcePosition
            }
        };
        withSelector: #makeErrorAtCurrentSourcePosition: addMethod: {|$(ParserState)self $(String)errorMessage :: ParseTreeNode |
            ParseTreeNode(ParseTreeErrorNode#{
                sourcePosition: self currentSourcePosition.
                errorMessage: errorMessage.
                innerNodes: ParseTreeNullNode()
            })
        };
        withSelector: #advanceWithExpectedError: addMethod: {|$(ParserState)self $(String)errorMessage :: ParseTreeNode |
            if: self peekKind = TokenKind Error then: {
                $errorToken := self next.

                return: ParseTreeNode(ParseTreeErrorNode#{
                    sourcePosition: errorToken sourcePosition.
                    errorMessage: errorMessage.
                    innerNodes: ParseTreeNullNode()})
            }.
            if: self atEnd then: {
                return: ParseTreeNode(ParseTreeErrorNode#{
                    sourcePosition: self currentSourcePosition.
                    errorMessage: errorMessage.
                    innerNodes: ParseTreeNullNode()})
            }.

            return: ParseTreeNode(ParseTreeErrorNode#{
                sourcePosition: self currentSourcePosition.
                errorMessage: errorMessage.
                innerNodes: ParseTreeNullNode()})
        }.

    $parseIntegerConstant($(String)text :: Integer) := {
        $!value := 0.
        $!radix := 10.
        $!hasSeenRadix := false.
        
        $i := 0.
        $stringSize := text size.
        while: i < stringSize do: {
            $c := text at: i.
            if: hasSeenRadix not && ((c = 'r') || (c = 'R')) then: {
                radix := value.
                value := 0.
                hasSeenRadix := true
            } else: {
                if: ('0' <= c) && (c <= '9') then: {
                    $digit := (c - '0') asInteger.
                    value := (value*radix) + digit
                }.
                if: ('A' <= c) && (c <= 'Z') then: {
                    $digit := (c - 'A') asInteger + 10.
                    value := (value*radix) + digit
                }.
                if: ('a' <= c) && (c <= 'z') then: {
                    $digit := (c - 'a') asInteger + 10.
                    value := (value*radix) + digit
                }.
            }
        } continueWith: (i := i + 1).

        value
    }.

    Record: Parser withFields: #{
        state: ParserState.
    }.
    Parser
        withSelector: #parseInteger addMethod: {|$(Parser)self :: ParseTreeNode |
            $token := self state next.

            ParseTreeNode(ParseTreeLiteralIntegerNode#{
                sourcePosition: token sourcePosition.
                value: parseIntegerConstant(token getText)
            })
        };
        withSelector: #parseFloat addMethod: {|$(Parser)self :: ParseTreeNode |
            $token := self state next.

            ParseTreeNode(ParseTreeLiteralFloatNode#{
                sourcePosition: token sourcePosition.
                value: token getText asFloat
            })
        };
        withSelector: #parseCharacter addMethod: {|$(Parser)self :: ParseTreeNode |
            $token := self state next.
            $characterRawText := token getText.
            $characterTrimmedText := (characterRawText substringFrom: 1 until: characterRawText size - 1) parseCEscapeSequences.

            ParseTreeNode(ParseTreeLiteralCharacterNode#{
                sourcePosition: token sourcePosition.
                value: (characterTrimmedText at: 0)
            })
        };
        withSelector: #parseString addMethod: {|$(Parser)self :: ParseTreeNode |
            $token := self state next.
            $stringRawText := token getText.
            $stringTrimmedText := (stringRawText substringFrom: 1 until: stringRawText size - 1) parseCEscapeSequences.

            ParseTreeNode(ParseTreeLiteralStringNode#{
                sourcePosition: token sourcePosition.
                value: stringTrimmedText
            })
        };
        withSelector: #parseSymbol addMethod: {|$(Parser)self :: ParseTreeNode |
            $token := self state next.
            $symbolRawText := token getText.

            if: (symbolRawText size >= 2) && (symbolRawText at: 1) = '"' then: {
                $trimmedSymbolString := (symbolRawText substringFrom: 2 until: symbolRawText size - 1) parseCEscapeSequences.
                ParseTreeNode(ParseTreeLiteralSymbolNode#{
                    sourcePosition: token sourcePosition.
                    value: trimmedSymbolString asSymbol
                })
            }
            else: {
                $trimmedSymbolString := symbolRawText substringFrom: 1 until: symbolRawText size.
                ParseTreeNode(ParseTreeLiteralSymbolNode#{
                    sourcePosition: token sourcePosition.
                    value: trimmedSymbolString asSymbol
                })
            }
        };
        withSelector: #parseLiteral addMethod: {|$(Parser)self :: ParseTreeNode |
            $kind := self state peekKind.
            if: kind = TokenKind Nat then: {
                return: self parseInteger
            }.
            if: kind = TokenKind Float then: {
                return: self parseFloat
            }.
            if: kind = TokenKind Character then: {
                return: self parseCharacter
            }.
            if: kind = TokenKind String then: {
                return: self parseString
            }.
            if: kind = TokenKind Symbol then: {
                return: self parseSymbol
            }.

            self state advanceWithExpectedError: "Expected a literal."
        };
        withSelector: #parseTerm addMethod: {|$(Parser)self :: ParseTreeNode |
            self parseLiteral
        };
        withSelector: #parseExpression addMethod: {|$(Parser)self :: ParseTreeNode |
            self parseTerm
        };
        withSelector: #parseExpressionListUntilEndOrDelimiter: addMethod: {|$(Parser)self $(TokenKind)delimiter :: Array |
            $expressions := OrderedCollection().

            ## Leading dots
            while: self state peekKind = TokenKind Dot do: {
                self state advance
            }.

            $!expectsExpressions := true.
            while: (self state atEnd not && (self state peekKind ~= delimiter)) do: {
                if: expectsExpressions not then: {
                    expressions add: (self state makeErrorAtCurrentSourcePosition: "Expected dot before expression.")
                }.

                $expression := self parseExpression.
                expressions add: expression.

                ## Trailing dots
                expectsExpressions := false.
                while: self state peekKind = TokenKind Dot do: {
                    expectsExpressions := true.
                    self state advance
                }.
            }.

            expressions asArray
        };
        withSelector: #parseSequenceUntilEndOrDelimiter: addMethod: {|$(Parser)self $(TokenKind)delimiter :: ParseTreeNode |
            $startingPosition := self state position.
            $expressions := self parseExpressionListUntilEndOrDelimiter: delimiter.

            if: expressions size = 1 then: {
                return: (expressions at: 0)
            }.

            ParseTreeNode(ParseTreeSequenceNode#{
                sourcePosition: (self state sourcePositionFrom: startingPosition).
                elements: expressions
            })
        };
        withSelector: #parseTopLevelExpressions addMethod: {|$(Parser)self :: ParseTreeNode |
            self parseSequenceUntilEndOrDelimiter: TokenKind EndOfSource
        }.

$parseTokenList($(SourceCode)sourceCode $(Array)tokens :: ParseTreeNode) := {
    $initialState := ParserState#{
        sourceCode: sourceCode.
        tokenCount: tokens size.
        tokens: tokens.
        position: 0.
    }.
    $parser := Parser#{state: initialState}.
    parser parseTopLevelExpressions
}.

$parseString($(String)text :: ParseTreeNode) := {
    $sourceCode := makeSourceCodeForString(text).
    $tokens := scanSourceCode(sourceCode).
    parseTokenList(sourceCode . tokens)
}.

].

##printLine(parseString("42 . 42.5 'A' ")).
printLine(parseString("'A' . \"Hello\\n World\"")).
##printLine(parseString("#symbol . #\"Test Symbol\"")).
}.
