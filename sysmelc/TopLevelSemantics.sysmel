namespace: SysmelC definition: {
public: [
    SemanticsState
        withSelector: #analyzeAndEvaluateWithEnvironment:script: addMethod: {
        | $(SemanticsState)self $(Environment)environment $(ParseTreeNode)ast :: TypedValue |
        match: ast ofType: ParseTreeNode withPatterns: #{
            $(ParseTreeErrorNode)errorNode : {
                printLine(errorNode errorMessage).
                abort()
            }.

            ## Literals.
            $(ParseTreeLiteralIntegerNode)literal : {
                return: TypedValue(Value(IntegerValue(literal value)). getBasicIntrinsicTypes() integer).
            }.
            $(ParseTreeLiteralCharacterNode)literal : {
                return: TypedValue(Value(CharacterValue(literal value)). getBasicIntrinsicTypes() character).
            }.
            $(ParseTreeLiteralFloatNode)literal : {
                return: TypedValue(Value(FloatValue(literal value)) . getBasicIntrinsicTypes() float).
            }.
            $(ParseTreeLiteralStringNode)literal : {
                return: TypedValue(Value(StringValue(literal value)). getBasicIntrinsicTypes() string)
            }.
            $(ParseTreeLiteralSymbolNode)literal : {
                return: TypedValue(Value(SymbolValue(literal value)). getBasicIntrinsicTypes() symbol).
            }.

            ## Identifier reference
            $(ParseTreeIdentifierReferenceNode)identifier : {
                $value := environment lookupSymbolRecursively: identifier value.
                if: value isInvalidErrorValue then: {
                    printLine(value getInvalidErrorValueMessage).
                    abort()
                }.
                return: value.
            }.

            ## Functions and messages
            $(ParseTreeFunctionApplicationNode)functionApplication : {
                $functional := self analyzeAndEvaluateWithEnvironment: environment script: functionApplication functional.
                $functionalValue := extractFunctionFromValue(functional value).
                $invocationArguments := OrderedCollection().
                $argumentCount := functionApplication arguments size.
                $!i := 0. while: (i < argumentCount) do: {
                    $argumentValue := self analyzeAndEvaluateWithEnvironment: environment script: (functionApplication arguments at: i).
                    invocationArguments add: argumentValue
                } continueWith: (i := i + 1).

                match: functionalValue ofType: SysmelFunction withPatterns: #{
                    $(SysmelIntrinsicPrimitive)intrinsic : {
                        return: intrinsic implementation(invocationArguments asArray)
                    }.
                    _: {
                        printLine("Unsupported method function kind. " . functionalValue).
                        abort()
                    }
                }.
                abort()
            }.
            $(ParseTreeMessageSendNode)messageSend : {
                $receiverTypedValue := self analyzeAndEvaluateWithEnvironment: environment script: messageSend receiver.
                $selectorTypedValue := self analyzeAndEvaluateWithEnvironment: environment script: messageSend selector.

                $receiverType := receiverTypedValue type.
                $selector := extractSymbolFromValue(selectorTypedValue value).

                $method := receiverType lookupSelector: selector.
                ##printLine("Receiver type: ". receiverType).
                ##printLine("Selector: ". selector).
                ##printLine("method: ". method).
                if: method value isInvalidErrorValue then: {
                    printLine(method value getInvalidErrorValueMessage. " " . selector).
                    abort()
                }.

                ## TODO: add support for macros
                ##printLine(method type).
                $methodFunction := extractFunctionFromValue(method value).
                ##printLine(methodFunction).

                $invocationArguments := OrderedCollection().
                invocationArguments add: receiverTypedValue.
                $i := 0. while:(i < messageSend arguments size) do: {
                    $argument := messageSend arguments at: i.
                    $analyzedArgument := self analyzeAndEvaluateWithEnvironment: environment script: argument.
                    invocationArguments add: analyzedArgument.
                } continueWith:(i := i + 1).

                match: methodFunction ofType: SysmelFunction withPatterns: #{
                    $(SysmelIntrinsicPrimitive)intrinsic : {
                        return: intrinsic implementation(invocationArguments asArray)
                    }.
                    _: {
                        printLine("Unsupported method function kind. " . methodFunction).
                        abort()
                    }
                }
            }.
            $(ParseTreeBinaryOperatorSequenceNode)binopSequence : {
                if: binopSequence elements size = 1 then: {
                    return: (self analyzeAndEvaluateWithEnvironment: environment script: (binopSequence elements at: 0))
                }.

                $!receiver := binopSequence elements at: 0.
                $i := 1.
                while: i < binopSequence elements size do: {
                    $selector := binopSequence elements at: i.
                    $operand := binopSequence elements at: i + 1.
                    receiver := ParseTreeNode(ParseTreeMessageSendNode#{
                        sourcePosition: getSourcePositionFromNode(operand).
                        receiver: receiver.
                        selector: selector.
                        arguments: [operand]
                    })
                } continueWith: (i := i + 2).

                return: (self analyzeAndEvaluateWithEnvironment: environment script: receiver)
            }.
            ## Sequences, array, tuples
            $(ParseTreeSequenceNode)sequenceNode : {
                $!result := TypedValue(Value(VoidValue()). getBasicIntrinsicTypes() voidType)
                $!i := 0.
                while: i < sequenceNode elements size do: {
                    $element := sequenceNode elements at: i.
                    result := self analyzeAndEvaluateWithEnvironment: environment script: element
                } continueWith: (i := i + 1).
                return: result
            }.
            
            ## Assignment
            $(ParseTreeAssignmentNode)assignmentNode : {
                $store := assignmentNode store.
                $value := assignmentNode value.
                match: store ofType: ParseTreeNode withPatterns: #{
                    $(ParseTreeBindableNameNode)bindable : {
                        $!name := null.
                        if: bindable isAnonymous not then: {
                            $nameValue := self analyzeAndEvaluateWithEnvironment: environment script: bindable nameExpression.
                            name := extractSymbolFromValue(nameValue value)
                        }.

                        if: bindable hasPostTypeExpression && bindable typeExpression isFunctionalDependentTypeNode then: {
                            $functionNode := ParseTreeFunctionNode#{
                                sourcePosition: getSourcePositionFromNode(ast).
                                functionDependentType: bindable typeExpression.
                                bodyExpression: value.
                            }.
                            if: bindable isAnonymous not then: {
                                functionNode name: name.
                            }.

                            return: (self analyzeWithEnvironment: environment andCompileClosure: functionNode)
                        }.
                        printLine("bindable assignment ". name).
                        printLine("bindable type is function type: ". bindable typeExpression isFunctionalDependentTypeNode ).
                        abort()

                    }.
                    _: {
                        $selectorLiteral := ParseTreeNode(ParseTreeLiteralSymbolNode#{
                            sourcePosition: ast sourcePosition.
                            value: #":="
                        }).
                        $messageSend := ParseTreeNode(ParseTreeMessageSendNode#{
                            sourcePosition: ast sourcePosition.
                            receiver: store.
                            selector: selectorLiteral.
                            arguments: [value]
                        }).
                    }
                }
            }.
            _: {
                printLine("Unsupported parse-tree node: ". ast).
                abort()
            }
        }
    }
]

}