namespace: SysmelC definition: {
public: [
    SemanticsState
        withSelector: #analyzeAndEvaluateWithEnvironment:messageSendReceiver:selector:arguments: addMethod: {
            | $(SemanticsState)self $(Environment)environment $(TypedValue)receiverTypedValue $(TypedValue)selectorTypedValue $(Array)arguments :: TypedValue |
            $!receiverType := receiverTypedValue type.
            $selector := extractSymbolFromValue(selectorTypedValue value).
            $!decayedReceiverTypedValue := receiverTypedValue.

            $!method := receiverType lookupSelector: selector.
            if: method value isInvalidErrorValue then: {
                if: isValueBoxValue(receiverTypedValue value) then: {
                    $box := extractBoxFromValue(receiverTypedValue value).
                    decayedReceiverTypedValue := box value.
                    receiverType := decayedReceiverTypedValue type.
                    method := receiverType lookupSelector: selector.
                }.
            }.

            if: method value isInvalidErrorValue then: {
                if: isTypeValue(receiverTypedValue value) then: {
                    $receiverTypeValue := extractTypeFromValue(receiverTypedValue value).
                    match: receiverTypeValue ofType: SysmelType withPatterns: #{
                        $(SysmelEnumType)enumType : {
                            if: arguments size = 0 then: {
                                $enumValueIndex := findIndexOfEnumValueWithName(enumType. selector).
                                if: enumValueIndex >= 0 then: {
                                    $valueAtEnumIndex := enumType values at: enumValueIndex.
                                    $typedResult := TypedValue(valueAtEnumIndex. enumType supertype).
                                    return: typedResult
                                }
                            }.
                        }.
                        _: {
                            ## Ignored by default.
                        }
                    }.
                }.
                if: arguments size = 0 && isNamespaceValue(receiverTypedValue value) then: {
                    $namespace := extractNamespaceFromValue(receiverTypedValue value).

                    if: (namespace exportedObjectTable includesKey: selector) then: {
                        return: (namespace exportedObjectTable at: selector)
                    }.
                }.

                match: receiverType ofType: SysmelType withPatterns: #{
                    $(SysmelTupleAndRecordType)tupleAndRecord : {
                        $recordValue := extractRecordFromValue(receiverTypedValue value).

                        if: arguments size = 0 then: {
                            $fieldIndex := findIndexOfRecordFieldWithName(tupleAndRecord. selector).
                            if: fieldIndex >= 0 then: {
                                ## Implicit getter.
                                $fieldType := tupleAndRecord fields at: fieldIndex.
                                $fieldValue := recordValue tuple at: fieldIndex.
                                return: TypedValue(fieldValue. fieldType)
                            }
                        }.
                        if: arguments size = 1 then: {
                            $selectorWithoutTrailingColon := selector withoutTrailingColon.
                            $fieldIndex := findIndexOfRecordFieldWithName(tupleAndRecord. selectorWithoutTrailingColon).
                            if: fieldIndex >= 0 then: {
                                ## Implicit setter
                                $value := self analyzeAndEvaluateWithEnvironment: environment script: (arguments at: 0).
                                recordValue tuple at: fieldIndex put: value value.
                                return: value
                            }
                        }.
                    }.
                    _: {
                        ## Nothing required here. 
                    }
                }.
                printLine(method value getInvalidErrorValueMessage. " " . selector).
                abort()
            }.

            ## TODO: add support for macro methods.
            $methodFunction := extractFunctionFromValue(method value).

            $invocationArguments := OrderedCollection().
            invocationArguments add: decayedReceiverTypedValue.
            $i := 0. while:(i < arguments size) do: {
                $argument := arguments at: i.
                $analyzedArgument := self analyzeAndEvaluateWithEnvironment: environment script: argument.
                invocationArguments add: analyzedArgument.
            } continueWith:(i := i + 1).

            match: methodFunction ofType: SysmelFunction withPatterns: #{
                $(SysmelIntrinsicPrimitive)intrinsic : {
                    return: intrinsic implementation(invocationArguments asArray)
                }.
                $(SysmelCompiledFunction)compiledFunction : {
                    return: (compiledFunction midIR evaluateWithArguments: invocationArguments asArray)
                }.
                _: {
                    printLine("Unsupported method function kind. " . methodFunction).
                    abort()
                }
            }
        };
        withSelector: #analyzeAndEvaluateWithEnvironment:script: addMethod: {
        | $(SemanticsState)self $(Environment)environment $(ParseTreeNode)ast :: TypedValue |
        match: ast ofType: ParseTreeNode withPatterns: #{
            $(ParseTreeErrorNode)errorNode : {
                printLine(errorNode errorMessage).
                abort()
            }.
            $(ParseTreeAssertNode)assertNode : {
                $conditionValue := extractBooleanFromValue((self analyzeAndEvaluateWithEnvironment: environment script: assertNode condition) value).
                if: conditionValue not then: {
                    printLine("Assertion failure: ". assertNode sourcePosition getText).
                    abort()
                }.
            }.
            ## Literals.
            $(ParseTreeLiteralIntegerNode)literal : {
                return: TypedValue(Value(IntegerValue(literal value)). getBasicIntrinsicTypes() integer).
            }.
            $(ParseTreeLiteralCharacterNode)literal : {
                return: TypedValue(Value(CharacterValue(literal value)). getBasicIntrinsicTypes() character).
            }.
            $(ParseTreeLiteralFloatNode)literal : {
                return: TypedValue(Value(FloatValue(literal value)) . getBasicIntrinsicTypes() float).
            }.
            $(ParseTreeLiteralStringNode)literal : {
                return: TypedValue(Value(StringValue(literal value)). getBasicIntrinsicTypes() string)
            }.
            $(ParseTreeLiteralSymbolNode)literal : {
                return: TypedValue(Value(SymbolValue(literal value)). getBasicIntrinsicTypes() symbol).
            }.

            ## Identifier reference
            $(ParseTreeIdentifierReferenceNode)identifier : {
                $value := environment lookupSymbolRecursively: identifier value.
                if: value isInvalidErrorValue then: {
                    printLine(value getInvalidErrorValueMessage).
                    abort()
                }.
                return: value.
            }.

            ## Functions and messages
            $(ParseTreeFunctionApplicationNode)functionApplication : {
                $functional := self analyzeAndEvaluateWithEnvironment: environment script: functionApplication functional.

                ## Is this a type constructor invocation?
                if: isTypeValue(functional value) then: {
                    $typeToConstruct := extractTypeFromValue(functional value).

                    $invocationArguments := OrderedCollection().
                    $argumentCount := functionApplication arguments size.
                    $!i := 0. while: (i < argumentCount) do: {
                        $argumentValue := self analyzeAndEvaluateWithEnvironment: environment script: (functionApplication arguments at: i).
                        invocationArguments add: argumentValue
                    } continueWith: (i := i + 1).
                    
                    return: (instantiateTypeWithArguments(typeToConstruct . invocationArguments asArray))
                }.

                $functionalValue := extractFunctionFromValue(functional value).
                $functionalIsMacro := sysmelFunctionIsMacro(functionalValue).

                if: functionalIsMacro then: {
                    $macroContext := MacroContext#{
                        sourcePosition: functionApplication sourcePosition.
                        environment: environment.
                        semanticsState: self.
                    }.

                    $macroResult := match: functionalValue ofType: SysmelFunction withPatterns: #{
                        $(SysmelIntrinsicPrimitive)intrinsic : {
                            intrinsic implementation(macroContext . functionApplication arguments)
                        }.
                        $(SysmelCompiledFunction)compiledFunction : {
                            compiledFunction midIR evaluateWithArguments: [macroContext] -- functionApplication arguments
                        }.
                        _: {
                            printLine("Unsupported method function kind. " . functionalValue).
                            abort()
                        }
                    }.

                    if: valueContainsParseTreeFromValue(macroResult value) then: {
                        $macroASTResult := extractParseTreeNodeFromValue(macroResult value).
                        return: (self analyzeAndEvaluateWithEnvironment: environment script: macroASTResult).
                    } else: {
                        return: macroResult
                    }.
                }.

                $invocationArguments := OrderedCollection().
                $argumentCount := functionApplication arguments size.
                $!i := 0. while: (i < argumentCount) do: {
                    $argumentValue := self analyzeAndEvaluateWithEnvironment: environment script: (functionApplication arguments at: i).
                    invocationArguments add: argumentValue
                } continueWith: (i := i + 1).

                match: functionalValue ofType: SysmelFunction withPatterns: #{
                    $(SysmelIntrinsicPrimitive)intrinsic : {
                        return: intrinsic implementation(invocationArguments asArray)
                    }.
                    $(SysmelCompiledFunction)compiledFunction : {
                        return: (compiledFunction midIR evaluateWithArguments: invocationArguments asArray)
                    }.
                    _: {
                        printLine("Unsupported method function kind. " . functionalValue).
                        abort()
                    }
                }.
                abort()
            }.
            $(ParseTreeMessageSendNode)messageSend : {
                $receiverTypedValue := self analyzeAndEvaluateWithEnvironment: environment script: messageSend receiver.
                $selectorTypedValue := self analyzeAndEvaluateWithEnvironment: environment script: messageSend selector.
                $result := self analyzeAndEvaluateWithEnvironment: environment messageSendReceiver: receiverTypedValue selector: selectorTypedValue arguments: messageSend arguments.
                return: result
            }.
            $(ParseTreeMessageCascadeNode)messageCascade : {
                $receiverTypedValue := self analyzeAndEvaluateWithEnvironment: environment script: messageCascade receiver.
                $!result := receiverTypedValue.
                $!i := 0. while: (i < messageCascade cascadedMessages size) do: {
                    $cascadedNode := messageCascade cascadedMessages at: i.
                    match: cascadedNode ofType: ParseTreeNode withPatterns: #{
                        $(ParseTreeCascadedMessageNode)cascadedMessage : {
                            $selectorTypedValue := self analyzeAndEvaluateWithEnvironment: environment script: cascadedMessage selector.
                            
                            $result := self analyzeAndEvaluateWithEnvironment: environment messageSendReceiver: receiverTypedValue selector: selectorTypedValue arguments: cascadedMessage arguments.
                        }
                    }.
                } continueWith:(i := i + 1).
                
                return: result
            }.
            $(ParseTreeBinaryOperatorSequenceNode)binopSequence : {
                if: binopSequence elements size = 1 then: {
                    return: (self analyzeAndEvaluateWithEnvironment: environment script: (binopSequence elements at: 0))
                }.

                $!receiver := binopSequence elements at: 0.
                $i := 1.
                while: i < binopSequence elements size do: {
                    $selector := binopSequence elements at: i.
                    $operand := binopSequence elements at: i + 1.
                    receiver := ParseTreeNode(ParseTreeMessageSendNode#{
                        sourcePosition: getSourcePositionFromNode(operand).
                        receiver: receiver.
                        selector: selector.
                        arguments: [operand]
                    })
                } continueWith: (i := i + 2).

                return: (self analyzeAndEvaluateWithEnvironment: environment script: receiver)
            }.
            ## Sequences, array, tuples
            $(ParseTreeSequenceNode)sequenceNode : {
                $!result := TypedValue(Value(VoidValue()). getBasicIntrinsicTypes() voidType).
                $!i := 0.
                while: i < sequenceNode elements size do: {
                    $element := sequenceNode elements at: i.
                    result := self analyzeAndEvaluateWithEnvironment: environment script: element
                } continueWith: (i := i + 1).
                return: result
            }.
            $(ParseTreeArrayNode)arrayNode : {
                $array := Array new: arrayNode elements size
                $!i := 0.
                while: i < arrayNode elements size do: {
                    $element := arrayNode elements at: i.
                    $analyzedElement := self analyzeAndEvaluateWithEnvironment: environment script: element.
                    array at: i put: analyzedElement. 
                } continueWith: (i := i + 1).
                return: TypedValue(Value(ArrayValue(array)). getBasicIntrinsicTypes() array)
            }.
            $(ParseTreeTupleNode)tupleNode : {
                $array := Array new: tupleNode elements size
                $!i := 0.
                while: i < tupleNode elements size do: {
                    $element := tupleNode elements at: i.
                    $analyzedElement := self analyzeAndEvaluateWithEnvironment: environment script: element.
                    array at: i put: analyzedElement. 
                } continueWith: (i := i + 1).
                $tuple := array asTuple.
                return: TypedValue(Value(TupleValue(tuple)). getBasicIntrinsicTypes() tuple)
            }.

            ## Association and immutable dictionary.
            $(ParseTreeAssociationNode)association : {
                $key := (self analyzeAndEvaluateWithEnvironment: environment script: association key) value.
                $!value := null.
                if: association value isNullNode not then: {
                    value := (self analyzeAndEvaluateWithEnvironment: environment script: association value) value.
                }.

                return: TypedValue(Value(AssociationValue(key : value)). getBasicIntrinsicTypes() association)
            }.
            $(ParseTreeImmutableDictionaryNode)dictionary : {
                $dictionarySize := dictionary elements size.
                $evaluatedElements := Array new: dictionarySize.
                $!i := 0. while: (i < dictionarySize) do: {
                    $element := dictionary elements at: i.
                    $evaluatedElement := self analyzeAndEvaluateWithEnvironment: environment script: element.
                    $association := extractAssociationFromValue(evaluatedElement value).
                    evaluatedElements at: i put: association.
                } continueWith: (i := i + 1).
                
                $dictionary := evaluatedElements asImmutableDictionary.
                $resultValue := Value(ImmutableDictionaryValue#{value: dictionary}).
                return: TypedValue(resultValue . getBasicIntrinsicTypes() immutableDictionary).
            }.

            ## Assignment
            $(ParseTreeAssignmentNode)assignmentNode : {
                $store := assignmentNode store.
                $value := assignmentNode value.
                match: store ofType: ParseTreeNode withPatterns: #{
                    $(ParseTreeBindableNameNode)bindable : {
                        $!name := null.
                        if: bindable isAnonymous not then: {
                            $nameValue := self analyzeAndEvaluateWithEnvironment: environment script: bindable nameExpression.
                            name := extractSymbolFromValue(nameValue value)
                        }.

                        if: bindable hasPostTypeExpression && bindable typeExpression isFunctionalDependentTypeNode then: {
                            $functionNode := ParseTreeFunctionNode#{
                                sourcePosition: getSourcePositionFromNode(ast).
                                functionDependentType: bindable typeExpression.
                                bodyExpression: value.
                                isAnonymous: bindable isAnonymous.
                            }.
                            if: bindable isAnonymous not then: {
                                functionNode name: name.
                            }.

                            return: (self analyzeWithEnvironment: environment andCompileClosure: functionNode)
                        }.

                        $initialValue := self analyzeAndEvaluateWithEnvironment: environment script: value.
                        if: bindable isMutable then: {
                            value := TypedValue(Value(SysmelValueBox(initialValue)). getBasicIntrinsicTypes() gradual).
                            environment addLocalSymbol: name withValue: value.
                        }
                        else: {
                            environment addLocalSymbol: name withValue: initialValue
                        }.
                        return: initialValue.
                    }.
                    $(ParseTreeIdentifierReferenceNode)identifier : {
                        $storeValue := self analyzeAndEvaluateWithEnvironment: environment script: store.
                        $storeBox := extractBoxFromValue(storeValue value).

                        $valueToStore := self analyzeAndEvaluateWithEnvironment: environment script: value.
                        storeBox value: valueToStore.
                    }.
                    _: {
                        $selectorLiteral := ParseTreeNode(ParseTreeLiteralSymbolNode#{
                            sourcePosition: ast sourcePosition.
                            value: #":="
                        }).
                        $messageSend := ParseTreeNode(ParseTreeMessageSendNode#{
                            sourcePosition: ast sourcePosition.
                            receiver: store.
                            selector: selectorLiteral.
                            arguments: [value]
                        }).
                    }
                }
            }.
            ## Blocks
            $(ParseTreeBlockClosureNode)blockClosure : {
                $functionNode := ParseTreeFunctionNode#{
                    sourcePosition: blockClosure sourcePosition.
                    functionDependentType: blockClosure functionType.
                    bodyExpression: blockClosure body.
                    isAnonymous: true
                }.
                return: (self analyzeWithEnvironment: environment andCompileClosure: functionNode)
            }.
            $(ParseTreeLexicalBlockNode)lexicalBlock : {
                $blockLexicalScope := Environment(LexicalEnvironment#{
                    parent: environment.
                    localSymbols: SymbolHashtable().
                }).
                $result := self analyzeAndEvaluateWithEnvironment: blockLexicalScope script: lexicalBlock expression.
                return: result
            }.
            
            ## Control flow. Exposed via macros
            $(ParseTreeIfSelectionNode)ifSelection : {
                $condition := self analyzeAndEvaluateWithEnvironment: environment script: ifSelection condition.
                $conditionBoolean := extractBooleanFromValue(condition value).
                $result := if: conditionBoolean then: {
                    self analyzeAndEvaluateWithEnvironment: environment script: ifSelection trueExpression.
                } else: {
                    if: ifSelection falseExpression isNotNull then: {
                        self analyzeAndEvaluateWithEnvironment: environment script: ifSelection falseExpression.
                    } else: {
                        null
                    }
                }.
                return: result
            }.
            $(ParseTreeWhileLoopNode)whileLoop : {
                $result := TypedValue(Value(VoidValue()). getBasicIntrinsicTypes() voidType).

                while: extractBooleanFromValue((self analyzeAndEvaluateWithEnvironment: environment script: whileLoop condition) value)
                do: {
                    ## Body
                    self analyzeAndEvaluateWithEnvironment: environment script: whileLoop body.

                    if: whileLoop continueExpression isNotNull then: {
                        self analyzeAndEvaluateWithEnvironment: environment script: whileLoop continueExpression.
                    }
                }.

                return: result
            }.
            $(ParseTreeDoWhileLoopNode)doWhile : {
                $result := TypedValue(Value(VoidValue()). getBasicIntrinsicTypes() voidType).

                do:
                {
                    ## Body
                    self analyzeAndEvaluateWithEnvironment: environment script: doWhile body.

                    if: doWhile continueExpression isNotNull then: {
                        self analyzeAndEvaluateWithEnvironment: environment script: doWhile continueExpression.
                    }
                } while: extractBooleanFromValue((self analyzeAndEvaluateWithEnvironment: environment script: doWhile condition) value).
                return: result
            }.
            $(ParseTreeSwitchNode)switchSelection : {
                $switchValue := self analyzeAndEvaluateWithEnvironment: environment script: switchSelection value.
                $switchIntegerValue := switchValue value getIntegerValue.

                $switchCases := switchSelection cases.
                match: switchCases ofType: ParseTreeNode withPatterns: #{
                    $(ParseTreeImmutableDictionaryNode)caseDictionary : {
                        $dictionaryElements := caseDictionary elements.
                        $elementCount := dictionaryElements size.
                        $!i := 0. while: (i < elementCount) do: {
                            $caseAssociation := (dictionaryElements at: i) extractAssociationNode.
                            $caseValue := self analyzeAndEvaluateWithEnvironment: environment script: caseAssociation key.

                            match: caseValue value ofType: Value withPatterns: #{
                                $(IntegerValue)integerValue : {
                                    $caseIntegerValue := integerValue value.
                                    if: switchIntegerValue = caseIntegerValue then: {
                                        $result := self analyzeAndEvaluateWithEnvironment: environment script: caseAssociation value.
                                        return: result.
                                    }
                                }.
                                $(SymbolValue)symbolValue : {
                                    $result := self analyzeAndEvaluateWithEnvironment: environment script: caseAssociation value.
                                    return: result.
                                }.
                            }.
                            

                        } continueWith: (i := i + 1).

                        printLine(caseDictionary).
                        abort()
                    }.
                    _: {
                        printLine("Expected a dictionary with cases.").
                        abort().
                    }
                }.

                abort().
            }.
            $(ParseTreeSwitchPatternMatchingNode)switchPatternNode : {
                $sumTypeValue := self analyzeAndEvaluateWithEnvironment: environment script: switchPatternNode valueSumType.
                $sumType := match: sumTypeValue value getTypeValue ofType: SysmelType withPatterns: #{
                    $(SysmelSumType)sum : sum.
                    _: {
                        printLine("Expected a sum type.")
                    }
                }.
                
                $alternativeCount := sumType alternatives size.

                $sumValue := self analyzeAndEvaluateWithEnvironment: environment script: switchPatternNode value.
                $sumValueIndex := sumValue value getSumIndex.
                if: sumValueIndex >= alternativeCount then: {
                    printLine("Unexpected sum value with index ". sumValueIndex).
                    abort().
                }.

                $expectedAlternative := sumType alternatives at: sumValueIndex.
                ##printLine("Sumtype alternatives ". alternativeCount).
                ##printLine("expectedAlternative ". expectedAlternative getCommonSection name).

                $casesDictionary := match: switchPatternNode cases ofType: ParseTreeNode withPatterns: #{
                    $(ParseTreeImmutableDictionaryNode)dictionary : dictionary elements.
                    _: {
                        printLine("Expected a dictionary with the different patterns.").
                        abort()
                    }
                }.
                ##printLine("casesDictionary " . casesDictionary size).
                $!i := 0. while: (i < casesDictionary size) do: {
                    $caseAssoc := match: (casesDictionary at: i) ofType: ParseTreeNode withPatterns: #{
                        $(ParseTreeAssociationNode)parseAssoc : parseAssoc.
                        _: {
                            printLine("Expected associations as members of the case dictionay.").
                        }.
                    }.

                    $caseBindableName := match: caseAssoc key ofType: ParseTreeNode withPatterns: #{
                        $(ParseTreeBindableNameNode)bindable : bindable.
                        _: {
                            printLine("Expected associations as members of the case dictionay.").
                        }.
                    }.

                    $caseTypeExpression := self analyzeAndEvaluateWithEnvironment: environment script: caseBindableName typeExpression.
                    $caseTypeValue := caseTypeExpression value getTypeValue.

                    if: expectedAlternative == caseTypeValue then: {
                        $newLexicalEnvironment := Environment(LexicalEnvironment#{
                            parent: environment.
                            localSymbols: SymbolHashtable().
                        }).

                        if: caseBindableName nameExpression isNotNull then: {
                            $sumValueToBind := sumValue value getSumValue.
                            $bindableName := extractSymbolFromValue((self analyzeAndEvaluateWithEnvironment: environment script: caseBindableName nameExpression) value).

                            newLexicalEnvironment addLocalSymbol: bindableName withValue: TypedValue(sumValueToBind. caseTypeValue).
                        }.
                        
                        $result := self analyzeAndEvaluateWithEnvironment: newLexicalEnvironment script: caseAssoc value.
                        return: result
                    }
                } continueWith: (i := i + 1).

                printLine("No valid cases were found.").
                abort()
            }.
            ## Namespace
            $(ParseTreeNamespaceDefinitionNode)namespaceDefinition : {
                $newNamespaceEnvironment := Environment(NamespaceEnvironment#{
                    parent: environment.
                    namespace: namespaceDefinition namespace
                }).

                $newLexicalEnvironment := Environment(LexicalEnvironment#{
                    parent: newNamespaceEnvironment.
                    localSymbols: SymbolHashtable().
                }).

                return: (self analyzeAndEvaluateWithEnvironment: newLexicalEnvironment script: namespaceDefinition definition).
            }.

            _: {
                printLine("Unsupported parse-tree node: ". ast).
                abort()
            }
        }
    }
]

}