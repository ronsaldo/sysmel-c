namespace: SysmelC definition: {
public: [
    Record: TopLevelSemanticsState withFields: #{
        currentExpectedType: Type
    }.

    TopLevelSemanticsState
        withSelector: #analyzeAndEvaluateWithEnvironment:script: addMethod: {
        | $(TopLevelSemanticsState)self $(Environment)environment $(ParseTreeNode)ast :: Value |
        match: ast ofType: ParseTreeNode withPatterns: #{
            $(ParseTreeErrorNode)errorNode : {
                printLine(errorNode errorMessage).
                abort()
            }.

            ## Literals.
            $(ParseTreeLiteralIntegerNode)literal : {
                return: Value(IntegerValue(literal value)).
            }.
            $(ParseTreeLiteralCharacterNode)literal : {
                return: Value(CharacterValue(literal value)).
            }.
            $(ParseTreeLiteralFloatNode)literal : {
                return: Value(FloatValue(literal value)).
            }.
            $(ParseTreeLiteralStringNode)literal : {
                return: Value(StringValue(literal value)).
            }.
            $(ParseTreeLiteralSymbolNode)literal : {
                return: Value(SymbolValue(literal value)).
            }.

            ## Identifier reference
            $(ParseTreeIdentifierReferenceNode)identifier : {
                $value := environment lookupSymbolRecursively: identifier value.
                if: value isInvalidErrorValue then: {
                    printLine(value getInvalidErrorValueMessage).
                    abort()
                }.
                return: value.
            }.

            ## Messages
            $(ParseTreeBinaryOperatorSequenceNode)binopSequence : {
                if: binopSequence elements size = 1 then: {
                    return: (self analyzeAndEvaluateWithEnvironment: environment script: (binopSequence elements at: 0))
                }.

                $!receiver := binopSequence elements at: 0.
                $i := 1.
                while: i < binopSequence elements size do: {
                    $selector := binopSequence elements at: i.
                    $operand := binopSequence elements at: i + 1.
                    receiver := ParseTreeNode(ParseTreeMessageSendNode#{
                        sourcePosition: getSourcePositionFromNode(operand).
                        receiver: receiver.
                        selector: selector.
                        arguments: [operand]
                    })
                } continueWith: (i := i + 2).

                return: (self analyzeAndEvaluateWithEnvironment: environment script: receiver)
            }.
            _: {
                printLine("Unsupported parse-tree node: ". ast).
                abort()
            }
        }
    }
]

$module := MakeModuleWithName("Test module").
$evaluateString($(String)text :: Value) := {
    $sourceCode := makeSourceCodeForString(text).
    $tokens := scanSourceCode(sourceCode).
    $ast := parseTokenList(sourceCode . tokens).

    $environment := module createTopLevelScriptEnvironment.

    TopLevelSemanticsState()
        analyzeAndEvaluateWithEnvironment: environment script: ast
}.

printLine(evaluateString("Int32")).

}