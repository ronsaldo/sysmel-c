namespace: SysmelC definition: {
public: [
Enum: LirRelocationType withBaseType: UInt8 values: #{
    None: 0.
    Absolute8:.
    Absolute16:.
    Absolute32:.
    Absolute64:.
    Relative8:.
    Relative16:.
    Relative32:.
    Relative64:.
}.

Record: LirAssemblerSymbol withFields: #{
    name: Symbol.
}.

Record: LirRelocationEntry withFields: #{
    type: LirRelocationType.
    addend: Integer.
    offset: Integer.
    symbol: LirAssemblerSymbol.
}.

Class: LirAssemblerSection withFields: #{
    name: String.
    contents: ByteOrderedCollection.
    relocations: OrderedCollection.
    outputIndex: Integer.
    isWriteable: Boolean.
    isAllocated: Boolean.
    isExecutable: Boolean.
}.

Class: LirAssemblerStringSection withSuperclass: LirAssemblerSection fields: #{
}.

Class: LirAssembler withFields: #{
    sections: OrderedCollection.
    textSection: LirAssemblerSection.
    rodataSection: LirAssemblerSection.
    dataSection: LirAssemblerSection.
    activeSection: LirAssemblerSection.

    stringSection: LirAssemblerStringSection.
    sectionHeaderStringSection: LirAssemblerStringSection.
}.

].
LirAssemblerSection
    withSelector: #initializeWithName: addMethod: {
        | $(LirAssemblerSection)self $(Symbol)name :: LirAssemblerSection |
        self name: name.
        self contents: ByteOrderedCollection().
        self relocations: OrderedCollection().
        self outputIndex: 0.
        self isExecutable: false.
        self isAllocated: false.
        self isWriteable: false.
        self
    };
    withSelector: #isStringSection addMethod: {
        | $(LirAssemblerSection)self :: Boolean |
        false
    }.
LirAssemblerStringSection
    withSelector: #initializeWithName: addMethod: {
        | $(LirAssemblerStringSection)self $(Symbol)name :: LirAssemblerStringSection |
        self name: name.
        self contents: ByteOrderedCollection().
        self relocations: OrderedCollection().
        self outputIndex: 0.
        self isExecutable: false.
        self isAllocated: false.
        self isWriteable: false.
        ## Start with an empty string.
        self contents add: 0u8.
        self
    };
    withSelector: #isStringSection addMethod: {
        | $(LirAssemblerStringSection)self :: Boolean |
        true
    };
    withSelector: #getStringIndex: addMethod: {
        | $(LirAssemblerStringSection)self $(String)string :: Integer|
        $result := self contents size.
        $stringSize := string size.
        $!i := 0. while: (i < stringSize) do: {
            $character := string at: i.
            self contents add: character asUInt8.
        } continueWith: (i := i + 1).
        self contents add: 0u8.

        result
    }.

LirAssembler
    withSelector: #initialize addMethod: {
        | $(LirAssembler)self :: Void |
        self sections: OrderedCollection().

        self textSection: (LirAssemblerSection() initializeWithName: ".text").
        self rodataSection: (LirAssemblerSection() initializeWithName: ".rodata").
        self dataSection: (LirAssemblerSection() initializeWithName: ".data").
        self stringSection: (LirAssemblerStringSection() initializeWithName: ".strtab").
        self sectionHeaderStringSection: (LirAssemblerStringSection() initializeWithName: ".shstrtab").
        self activeSection: self textSection.

        self textSection isExecutable: true.
        self textSection isAllocated: true.
        self textSection isWriteable: false.

        self rodataSection isExecutable: false.
        self rodataSection isAllocated: true.
        self rodataSection isWriteable: false.

        self dataSection isExecutable: false.
        self dataSection isAllocated: true.
        self dataSection isWriteable: true.

        self sections add: self textSection.
        self sections add: self rodataSection.
        self sections add: self dataSection.
        self sections add: self stringSection.
        self sections add: self sectionHeaderStringSection.
    };
    withSelector: #beginTextSection addMethod: {
        | $(LirAssembler)self :: Void |
        self activeSection: self textSection
    };
    withSelector: #beginRodataSection addMethod: {
        | $(LirAssembler)self :: Void |
        self activeSection: self rodataSection
    };
    withSelector: #beginDataSection addMethod: {
        | $(LirAssembler)self :: Void |
        self activeSection: self rodataSection
    };
    withSelector: #writeBinaryToFileNamed: addMethod: {
        | $(LirAssembler)self $(String)fileName :: Void |
        $binaryData := ByteOrderedCollection().
        binaryData addAll: self textSection contents asByteArray.
        binaryData addAll: self rodataSection contents asByteArray.
        binaryData addAll: self dataSection contents asByteArray.

        writeWholeFileWithBinaryData(fileName . binaryData asByteArray).
    };
    withSelector: #nextPutAll: addMethod: {
        | $(LirAssembler)self $(ByteArray)bytes :: Void |
        self activeSection contents addAll: bytes
    }.
}.
