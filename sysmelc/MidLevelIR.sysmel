namespace: SysmelC definition: {
public: [


    Class: MidConstant withSuperclass: MidValue fields: #{
    }.

    Class: MidConstantInteger withSuperclass: MidConstant fields: #{
        value: Integer
    }.
    Class: MidConstantCharacter withSuperclass: MidConstant fields: #{
        value: Integer
    }.
    Class: MidConstantFloat withSuperclass: MidConstant fields: #{
        value: Float
    }.
    Class: MidConstantString withSuperclass: MidConstant fields: #{
        value: String
    }.
    Class: MidConstantSymbol withSuperclass: MidConstant fields: #{
        value: Symbol
    }.
    Class: MidConstantType withSuperclass: MidConstant fields: #{
        value: SysmelType
    }.
    Class: MidConstantValue withSuperclass: MidConstant fields: #{
        value: Value
    }.
    Class: MidGlobalValue withSuperclass: MidConstant fields: #{
        name: Symbol
    }.


    Class: MidControlNode withSuperclass: MidValue fields: #{
        previousControl: MidValue.
    }.

    Class: MidStartNode withSuperclass: MidControlNode fields: #{
        arguments: Array.
        captures: Array.
    }.

    Class: MidStopNode withSuperclass: MidControlNode fields: #{
        exitPoints: Array
    }.

    Class: MidClosureFunction withSuperclass: MidGlobalValue fields: #{
        captures: Array.
        arguments: Array.
        startNode: MidStartNode.
        stopNode: MidStopNode.
        instructionSchedule: Array
    }.
    
    Class: MidFunctionLocalValue withSuperclass: MidValue fields: #{
        owner: MidClosureFunction
    }.

    Class: MidArgument withSuperclass: MidFunctionLocalValue fields: #{
        index: UInt32.
        name: Symbol.
        typeExpression: MidValue
    }.

    Class: MidCapture withSuperclass: MidFunctionLocalValue fields: #{
        index: UInt32.
        typeExpression: MidValue
    }.

    Class: MidReturn withSuperclass: MidControlNode fields: #{
        resultValue: MidValue
    }.

    Class: MidCallFunction withSuperclass: MidControlNode fields: #{
        functional: MidValue.
        selector: MidValue.
        arguments: Array.
    }.

    Class: MidSendMessage withSuperclass: MidControlNode fields: #{
        receiver: MidValue.
        selector: MidValue.
        arguments: Array.
    }.

    Class: MidBranchNode withSuperclass: MidControlNode fields: #{
        condition: MidValue.
        trueDestination: MidControlNode.
        falseDestination: MidControlNode.
        branchMerge: MidControlNode.
    }.
    Class: MidBranchDestinationNode withSuperclass: MidControlNode fields: #{
    }.

    Class: MidBranchMergeNode withSuperclass: MidControlNode fields: #{
        branchNode: MidControlNode.
        incomingEdges: Array.
    }.

    Class: MidMergePhiNode withSuperclass: MidControlNode fields: #{
        incomingValues: Array.
    }.
    Class: MidPhiNodeValue withSuperclass: MidControlNode fields: #{
        sourceValue: MidValue.
        destinationPhi: MidMergePhiNode.
    }.

    Record: MidFunctionBuilder withFields: #{
        midFunction: MidClosureFunction.
        currentControlNode: MidControlNode.
        exitPoints: OrderedCollection.
        sourcePosition: SourcePosition.
    }.

    Record: MidActivationContext withFields: #{
        arguments: Array.
        scheduledInstructions: Array.
        scheduledInstructionValues: Array.
        pc: UInt32.
        hasReachedExitPoint: Boolean.
        exitPointValue: TypedValue.
    }.
].

MidValue
    withSelector: #addUser: addMethod: {
        | $(MidValue)self $(MidValue)user |
        if: self users isNull then: {
            self users: OrderedCollection()
        }.
        self users add: user
    };
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidValue)self $(MidActivationContext)context :: Void |
        printLine("subclassResponsibility #evaluateInActivationContext: ". self class).
        abort().
    }.

MidActivationContext
    withSelector: #evaluate addMethod: {
        | $(MidActivationContext)self :: TypedValue |
        self hasReachedExitPoint: false.
        $instructionCount := self scheduledInstructions size.
        while: (self pc < instructionCount) && (self hasReachedExitPoint not) do: {
            $instruction := self scheduledInstructions at: self pc.
            ##printLine(instruction).
            instruction evaluateInActivationContext: self
        }.
        if: self hasReachedExitPoint then: {
            return: self exitPointValue
        }.
        abort()
    };
    withSelector: #setValueInCurrentPC: addMethod: {
        | $(MidActivationContext)self $(TypedValue)value :: Void |
        self scheduledInstructionValues at: self pc put: value
    };
    withSelector: #getValueFromPC: addMethod: {
        | $(MidActivationContext)self $(UInt32)pc :: TypedValue |
        self scheduledInstructionValues at: pc
    };
    
    withSelector: #advancePC addMethod: {
        | $(MidActivationContext)self :: Void |
        self pc: self pc + 1.
        void
    }.

MidArgument
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidStartNode)self $(MidActivationContext)context :: Void |
        context setValueInCurrentPC: (context arguments at: self index).
        context advancePC.
    }.

MidStartNode
    withSelector: #usedValues addMethod: {
        | $(MidStartNode)self :: Array |
        self arguments -- self captures
    };
    withSelector: #connectWithUsed addMethod: {
        | $(MidStartNode)self :: Void |
        {
            $!i := 0.
            $argumentCount := self arguments size.
            while: (i < argumentCount) do:
            {
                (self arguments at: i) addUser: self
            } continueWith: (i := i + 1).
        }.
        {
            $!i := 0.
            $captureCount := self captures size.
            while: (i < captureCount) do:
            {
                (self captures at: i) addUser: self
            } continueWith: (i := i + 1).
        }
    };
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidStartNode)self $(MidActivationContext)context :: Void |
        context advancePC.
    }.

MidBranchNode
    withSelector: #usedValues addMethod: {
        | $(MidStartNode)self :: Array |
        [self previousControl . self condition]
    };
    withSelector: #connectWithUsed addMethod: {
        | $(MidBranchNode)self :: Void |
        self condition addUser: self.
    }.
MidBranchDestinationNode
    withSelector: #usedValues addMethod: {
        | $(MidStartNode)self :: Array |
        [self previousControl]
    };
    withSelector: #connectWithUsed addMethod: {
        | $(MidBranchDestinationNode)self :: Void |
        
    }.
MidBranchMergeNode
    withSelector: #usedValues addMethod: {
        | $(MidStartNode)self :: Array |
        [self branchNode ] -- self incomingEdges
    };
    withSelector: #connectWithUsed addMethod: {
        | $(MidBranchMergeNode)self :: Void |
        
    }.
MidConstantInteger
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidConstantInteger)self $(MidActivationContext)context :: Void |
        context setValueInCurrentPC: TypedValue(Value(IntegerValue(self value)). self type).
        context advancePC.
    }.
MidConstantFloat
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidConstantFloat)self $(MidActivationContext)context :: Void |
        context setValueInCurrentPC: TypedValue(Value(FloatValue(self value)). self type).
        context advancePC.
    }.
MidConstantString
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidConstantString)self $(MidActivationContext)context :: Void |
        context setValueInCurrentPC: TypedValue(Value(StringValue(self value)). self type).
        context advancePC.
    }.
MidConstantSymbol
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidConstantString)self $(MidActivationContext)context :: Void |
        context setValueInCurrentPC: TypedValue(Value(SymbolValue(self value)). self type).
        context advancePC.
    }.
MidConstantValue
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidConstantValue)self $(MidActivationContext)context :: Void |
        context setValueInCurrentPC: TypedValue(self value. self type).
        context advancePC.
    }.

MidStopNode
    withSelector: #usedValues addMethod: {
        | $(MidStopNode)self :: Array |
        self exitPoints
    };
    withSelector: #connectWithUsed addMethod: {
        | $(MidStopNode)self :: Void |
        {
            $!i := 0.
            $exitPointCount := self exitPoints size.
            while: (i < exitPointCount) do:
            {
                (self exitPoints at: i) addUser: self
            } continueWith: (i := i + 1).
        }.
    }.

MidCallFunction
    withSelector: #usedValues addMethod: {
        | $(MidCallFunction)self :: Array |
        [self previousControl . self functional] -- self arguments 
    };
    withSelector: #connectWithUsed addMethod: {
        | $(MidCallFunction)self :: Void |
        self functional addUser: self.
        {
            $!i := 0.
            $argumentCount := self arguments size.
            while: (i < argumentCount) do:
            {
                (self arguments at: i) addUser: self
            } continueWith: (i := i + 1).
        }.
    }.

MidSendMessage
    withSelector: #usedValues addMethod: {
        | $(MidSendMessage)self :: Array |
        [self previousControl . self receiver . self selector] -- self arguments 
    };
    withSelector: #connectWithUsed addMethod: {
        | $(MidSendMessage)self :: Void |
        self receiver addUser: self.
        self selector addUser: self.
        {
            $!i := 0.
            $argumentCount := self arguments size.
            while: (i < argumentCount) do:
            {
                (self arguments at: i) addUser: self
            } continueWith: (i := i + 1).
        }.
    };
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidSendMessage)self $(MidActivationContext)context :: Void |
        $receiverTypedValue := context getValueFromPC: self receiver scheduleIndex.
        $selectorTypedValue := context getValueFromPC: self selector scheduleIndex.

        $receiverType := receiverTypedValue type.
        $selector := extractSymbolFromValue(selectorTypedValue value).
        
        $method := receiverType lookupSelector: selector.
        if: method value isInvalidErrorValue then: {
            printLine(method value getInvalidErrorValueMessage. " " . selector).
            abort()
        }.
        $methodFunction := extractFunctionFromValue(method value).

        $invocationArguments := OrderedCollection().
        invocationArguments add: receiverTypedValue.
        $i := 0. while:(i < self arguments size) do: {
            $argument := context getValueFromPC: (self arguments at: i) scheduleIndex.
            ##printLine("Arg". i. " ". argument).
            invocationArguments add: argument.
        } continueWith:(i := i + 1).

        match: methodFunction ofType: SysmelFunction withPatterns: #{
            $(SysmelIntrinsicPrimitive)intrinsic : {
                context setValueInCurrentPC: intrinsic implementation(invocationArguments asArray)
            }.
            $(SysmelCompiledFunction)compiledFunction : {
                context setValueInCurrentPC: (compiledFunction midIR evaluateWithArguments: invocationArguments asArray)
            }.
            _: {
                printLine("Unsupported method function kind. " . methodFunction).
                abort()
            }
        }.
        context advancePC.
    }.

MidReturn
    withSelector: #usedValues addMethod: {
        | $(MidReturn)self :: Array |
        [self previousControl . self resultValue]
    };
    withSelector: #connectWithUsed addMethod: {
        | $(MidReturn)self :: Void |
        self resultValue addUser: self.
    };
    withSelector: #evaluateInActivationContext: addMethod: {
        | $(MidReturn)self $(MidActivationContext)context :: Void |
        $resultValue := context getValueFromPC: self resultValue scheduleIndex.
        context setValueInCurrentPC: resultValue.
        context exitPointValue: resultValue.
        context hasReachedExitPoint: true
    }.
MidValue
    withSelector: #usedValues addMethod: {
        | $(MidValue)self :: Array |
        []
    };
    withSelector: #usageTopoSort:into: addMethod: {
        | $(MidValue)self $(IdentityHashset)visitedSet $(OrderedCollection)sortedResults :: Void |
        if: (visitedSet includes: self) then: {
            return: void
        }.
        visitedSet add: self.

        $usedValues := self usedValues.
        $!i := 0.
        while: i < usedValues size do: {
            (usedValues at: i)
                usageTopoSort: visitedSet into: sortedResults
        } continueWith: (i := i + 1).

        sortedResults add: self
    };
    withSelector: #usageTopoSort addMethod: {
        | $(MidValue)self :: Array |

        $visitedSet := IdentityHashset().
        $sortedElements := OrderedCollection().
        self usageTopoSort: visitedSet into: sortedElements.

        sortedElements asArray
    }.
MidClosureFunction
    withSelector: #makeBuilder addMethod: {
        | $(MidClosureFunction) self :: MidFunctionBuilder |
        $startNode := MidStartNode#{
            captures: self captures.
            arguments: self arguments.
        }.
        startNode connectWithUsed.
        self startNode: startNode.

        $builder := MidFunctionBuilder#{
            midFunction: self.
            currentControlNode: startNode.
            exitPoints: OrderedCollection()
        }.
        builder
    };

    withSelector: #ensureInstructionSchedule addMethod: {
        | $(MidClosureFunction)self :: Void |
        if: self instructionSchedule isNotNull then: {
            return: void
        }.

        ## TODO: Implement GCM algorithm.
        $topoSort := self stopNode usageTopoSort.

        ## Enumerate the scheduled instructions.
        $!i := 0. while: i < topoSort size do: {
            (topoSort at: i) scheduleIndex: i asUInt32
        } continueWith:(i := i + 1).
        
        self instructionSchedule: topoSort.
        self dumpSchedule

    };
    withSelector: #dumpSchedule addMethod: {
        | $(MidClosureFunction)self :: Void |
        $schedule := self instructionSchedule.

        printLine("digraph function {").

        $!i := 0. while: (i < schedule size) do: {
            $scheduledInstruction := schedule at: i.
            print("\t". scheduledInstruction class. i).

            $usedValues := scheduledInstruction usedValues.
            $!j := 0. while: (j < usedValues size) do: {
                $usedValue := usedValues at: j.
                print(" -> ". usedValue class. usedValue scheduleIndex asInteger)
            } continueWith: (j := j + 1).
            
            printLine(";").
        } continueWith: (i := i + 1).

        printLine("}").

    };
    withSelector: #evaluateWithArguments: addMethod: {
        | $(MidClosureFunction)self $(Array)arguments :: TypedValue |
        self ensureInstructionSchedule.

        $activationContext := MidActivationContext#{
            arguments: arguments.
            scheduledInstructions: self instructionSchedule.
            scheduledInstructionValues: (Array new: self instructionSchedule size).
            pc: 0u32.
        }.
        activationContext evaluate
    }.

MidFunctionBuilder
    withSelector: #returnValue: addMethod: {
        | $(MidFunctionBuilder)self $(MidValue)resultValue :: MidReturnInstruction |
        $instruction := MidReturn#{
            sourcePosition: self sourcePosition.
            users: OrderedCollection().
            type: getBasicIntrinsicTypes() voidType.
            resultValue: resultValue.
            previousControl: self currentControlNode.
        }.
        instruction connectWithUsed.
        self exitPoints add: instruction.
        self currentControlNode: instruction.
        return: instruction
    };
    withSelector: #constantInteger: addMethod: {
        | $(MidFunctionBuilder)self $(Integer)constantValue :: MidConstantInteger |
        MidConstantInteger#{
            sourcePosition: self sourcePosition.
            type: getBasicIntrinsicTypes() integer.
            value: constantValue
        }.
    };
    withSelector: #constantCharacter: addMethod: {
        | $(MidFunctionBuilder)self $(Character)constantValue :: MidConstantCharacter |
        MidConstantCharacter#{
            sourcePosition: self sourcePosition.
            type: getBasicIntrinsicTypes() character.
            value: constantValue
        }.
    };
    withSelector: #constantFloat: addMethod: {
        | $(MidFunctionBuilder)self $(Float)constantValue :: MidConstantFloat |
        MidConstantFloat#{
            sourcePosition: self sourcePosition.
            type: getBasicIntrinsicTypes() float.
            value: constantValue
        }.
    };
    withSelector: #constantString: addMethod: {
        | $(MidFunctionBuilder)self $(String)constantValue :: MidConstantString |
        MidConstantString#{
            sourcePosition: self sourcePosition.
            type: getBasicIntrinsicTypes() string.
            value: constantValue
        }.
    };
    withSelector: #constantSymbol: addMethod: {
        | $(MidFunctionBuilder)self $(Symbol)constantValue :: MidConstantSymbol |
        MidConstantSymbol#{
            sourcePosition: self sourcePosition.
            type: getBasicIntrinsicTypes() symbol.
            value: constantValue
        }.
    };
    withSelector: #constantValue: addMethod: {
        | $(MidFunctionBuilder)self $(Value)constantValue :: MidConstantValue |
        MidConstantValue#{
            sourcePosition: self sourcePosition.
            type: getBasicIntrinsicTypes() symbol.
            value: constantValue
        }.
    };

    withSelector: #call:withArguments: addMethod: {
        | $(MidFunctionBuilder)self $(MidValue)functional $(Array)arguments :: MidCallFunction |
        $node := MidCallFunction#{
            previousControl: self currentControlNode.
            sourcePosition: self sourcePosition.
            functional: functional.
            arguments: arguments.
        }.
        node connectWithUsed.
        self currentControlNode: node.
        node
    };    
    withSelector: #send:to:withArguments: addMethod: {
        | $(MidFunctionBuilder)self $(MidValue)selector $(MidValue)receiver $(Array)arguments  :: MidSendMessage |
        $node := MidSendMessage#{
            previousControl: self currentControlNode.
            sourcePosition: self sourcePosition.
            receiver: receiver.
            selector: selector.
            arguments: arguments.
        }.
        node connectWithUsed.
        self currentControlNode: node.
        node
    };
    withSelector: #conditionBranch: addMethod: {
        | $(MidFunctionBuilder)self $(MidValue)condition :: MidBranchNode |
        $node := MidBranchNode#{
            previousControl: self currentControlNode.
            sourcePosition: self sourcePosition.
            condition: condition.
        }.
        node connectWithUsed.
        self currentControlNode: node.
        node
    };
    withSelector: #makeBranchDestination: addMethod: {
        | $(MidFunctionBuilder)self $(MidBranchNode)branch :: MidBranchDestinationNode |
        $node := MidBranchDestinationNode#{
            previousControl: branch.
            sourcePosition: self sourcePosition.
        }.
    };
    withSelector: #makeBranchMerge: addMethod: {
        | $(MidFunctionBuilder)self $(MidBranchNode)branch :: MidBranchMergeNode |
        MidBranchMergeNode#{
            sourcePosition: self sourcePosition.
            branchNode: branch.
        }.
    };
    withSelector: #makePhiNodeValue addMethod: {
        | $(MidFunctionBuilder)self :: MidPhiNodeValue |
        MidPhiNodeValue#{
            sourcePosition: self sourcePosition.
        }.
    };
    withSelector: #makeMergePhiNode addMethod: {
        | $(MidFunctionBuilder)self :: MidMergePhiNode |
        MidMergePhiNode#{
            sourcePosition: self sourcePosition.
        }.
    };
    withSelector: #beginWithControlNode: addMethod: {
        | $(MidFunctionBuilder)self $(MidControlNode)controlNode :: Void |
        self currentControlNode: controlNode
    };
    withSelector: #finish addMethod: {
        | $(MidFunctionBuilder)self :: Void |
        $stopNode := MidStopNode#{
            exitPoints: self exitPoints asArray
        }.
        stopNode connectWithUsed.
        self midFunction stopNode: stopNode
    }.
}

