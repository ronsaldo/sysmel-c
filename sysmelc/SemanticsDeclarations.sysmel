namespace: SysmelC definition: {
public: [
    Record: Namespace withFields: #{
        name: Symbol.
        exportedObjectTable: SymbolHashtable.
        exportedObjectList: OrderedCollection.
    }.
    $MakeNamespaceNamed($(Symbol)name :: Namespace) := Namespace#{
        name: name.
        exportedObjectTable: SymbolHashtable().
        exportedObjectList: OrderedCollection().
    }.

    Record: Module withFields: #{
        name: Symbol.
        globalNamespace: Namespace.
    }.

    ## The different kinds of Environment
    Inductive: Environment withAlternatives: [
        Record: EmptyEnvironment withFields: #{}.
        Record: IntrinsicsEnvironment withFields: #{
            parent: Environment.
            localSymbols: SymbolHashtable.
        }.
        Record: ModuleEnvironment withFields: #{
            parent: Environment.
            module: Module.
        }.
        Record: NamespaceEnvironment withFields: #{
            parent: Environment.
            namespace: Namespace
        }.
        Record: LexicalEnvironment withFields: #{
            parent: Environment.
            localSymbols: SymbolHashtable.
        }.
        Record: FunctionAnalysisEnvironment withFields: #{
            parent: Environment.
            localSymbols: SymbolHashtable.
        }.
    ].
    
    ## Type
    Record: SysmelTypeCommon withFields: #{
        name: Symbol.
        printingSuffix: String.
        isValueType: Boolean.
        valueAlignment: UInt32.
        valueSize: UInt32.
        heapAlignment: UInt32.
        heapSize: UInt32.
        methodDict: SymbolHashtable.
    }.

    Inductive: SysmelType withAlternatives: [
        Record: SysmelBasicType withFields: #{
            common: SysmelTypeCommon.
            supertype: SysmelType.
        }.
        Record: SysmelTupleAndRecordType withFields: #{
            common: SysmelTypeCommon.
            supertype: SysmelType.
            fields: Array.
            fieldNames: Array
        }.
        Record: SysmelEnumType withFields: #{
            common: SysmelTypeCommon.
            supertype: SysmelType.
            valueCount: UInt32.
            values: Array.
            valueNames: Array.
        }.
        Record: SysmelSumType withFields: #{
            common: SysmelTypeCommon.
            supertype: SysmelType.
            alternativeCount: UInt32.
            alternatives: Array.
        }.
        Record: SysmelSimpleFunctionType withFields: #{
            common: SysmelTypeCommon.
            supertype: SysmelType.
            isCompileTimePure: Boolean.
            isVariadic: Boolean.
            argumentTypes: Array.
            resultType: SysmelType.
        }.
    ].

    SysmelType
        withSelector: #getCommonSection addMethod: {
            |$(SysmelType)self :: SysmelTypeCommon|
            match: self ofType: SysmelType withPatterns: #{
                $(SysmelBasicType)basicType : basicType common.
                $(SysmelTupleAndRecordType)tupleAndRecord : tupleAndRecord common.
                $(SysmelEnumType)enumType : enumType common.
                $(SysmelSimpleFunctionType)simpleFunctionType : simpleFunctionType common.
                _: {
                    printLine("Unsupported type kind").
                    abort()
                }
            }
        };
        withSelector: #getSupertype addMethod: {
            |$(SysmelType)self :: SysmelType|
            match: self ofType: SysmelType withPatterns: #{
                $(SysmelBasicType)basicType : basicType supertype.
                $(SysmelTupleAndRecordType)tupleAndRecord : tupleAndRecord supertype.
                $(SysmelEnumType)enumType : enumType supertype.
                $(SysmelSimpleFunctionType)simpleFunctionType : simpleFunctionType supertype.
                _: {
                    printLine("Unsupported type kind").
                    abort()
                }
            }
        }.

    Class: MidValue withFields: #{
        sourcePosition: SourcePosition.
        users: OrderedCollection.
        type: SysmelType.
        scheduleIndex: UInt32.
    }.

    Inductive: SysmelFunction withAlternatives: [
        Record: SysmelIntrinsicPrimitive withFields: #{
            name: Symbol.
            implementation: Function.
            isMacro: Boolean.
        }.
        Record: SysmelCompiledFunction withFields: #{
            name: Symbol.
            midIR: MidValue.
            isMacro: Boolean.
        }.
    ].

    Record: SemanticsState withFields: #{
        currentExpectedType: SysmelType
    }.

    Record: MacroContext withFields: #{
        sourcePosition: SourcePosition.
        environment: Environment.
        semanticsState: SemanticsState.
    }.
    
    Record: Record withFields: #{
        type: SysmelType.
        tuple: Tuple.
    }.

    ## A value with its different alternatives.
    Inductive: Value withAlternatives: [
        Record: InvalidErrorValue withFields: #{
            message: String
        }.
        Record: NullValue withFields: #{}.
        Record: VoidValue withFields: #{}.
        Record: IntegerValue withFields: #{
            value: Integer
        }.
        Record: BooleanValue withFields: #{
            value: Boolean
        }.
        Record: FloatValue withFields: #{
            value: Float
        }.
        Record: CharacterValue withFields: #{
            value: Character
        }.
        Record: StringValue withFields: #{
            value: String
        }.
        Record: SymbolValue withFields: #{
            value: Symbol
        }.
        Record: EnvironmentValue withFields: #{
            value: Environment
        }.
        Record: ParseTreeNodeValue withFields: #{
            value: ParseTreeNode
        }.
        Record: NamespaceValue withFields: #{
            value: Namespace
        }.
        Record: ModuleValue withFields: #{
            value: Module
        }.
        Record: SysmelTypeValue withFields: #{
            value: SysmelType
        }.
        Record: SysmelFunctionValue withFields: #{
            value: SysmelFunction
        }.
        Record: ArrayValue withFields: #{
            value: Array
        }.
        Record: TupleValue withFields: #{
            value: Tuple
        }.
        Record: RecordValue withFields: #{
            value: Record
        }.
        Record: AssociationValue withFields: #{
            value: Association.
        }.
        Record: ImmutableDictionaryValue withFields: #{
            value: ImmutableDictionary.
        }.
        Record: GradualValue withFields: #{
            value: GradualType.
        }.
        Record: SysmelMidValue withFields: #{
            value: MidValue
        }.
        Record: SysmelValueBox withFields: #{
            value: Value
        }.
    ].
    $extractValueForAnalysis($(Value)value :: Gradual) := {
        match: value ofType: Value withPatterns: #{
            $(IntegerValue)value : value value.
            $(BooleanValue)value : value value.
            $(FloatValue)value : value value.
            $(CharacterValue)value : value value.
            $(StringValue)value : value value.
            $(SymbolValue)value : value value.
            $(ArrayValue)value : value value.
            $(TupleValue)value : value value.
            $(AssociationValue)value : value value.
            $(ImmutableDictionaryValue)value : value value.
            $(GradualValue)value : value value.
            _: {
                value
            }
        }
    }.
    $extractValueForPrinting($(Value)value :: Gradual) := {
        match: value ofType: Value withPatterns: #{
            $(IntegerValue)value : value value.
            $(BooleanValue)value : value value.
            $(FloatValue)value : value value.
            $(CharacterValue)value : value value.
            $(StringValue)value : value value.
            $(SymbolValue)value : value value.
            $(ArrayValue)value : value value.
            $(TupleValue)value : value value.
            $(RecordValue)value : value value tuple.
            $(AssociationValue)value : value value.
            $(ImmutableDictionaryValue)value : value value.
            $(GradualValue)value : value value.
            $(NamespaceValue)value : value value.
            $(SysmelTypeValue)value : {
                $name := value value getCommonSection name.
                if: name isNull then: {
                    value value
                } else: {
                    name
                }
            }.
            _: {
                value
            }
        }
    }.

    ## Typed value
    Record: TypedValue withFields: #{
        value: Value.
        type: SysmelType
    }.
        
    Value
        withSelector: #isInvalidErrorValue addMethod: {
            |$(Value)self :: Boolean |
            match: self ofType: Value withPatterns: #{
                $(InvalidErrorValue)errorValue : true.
                _: false.
            }
        };
        withSelector: #getInvalidErrorValueMessage addMethod: {
            |$(Value)self :: String |
            match: self ofType: Value withPatterns: #{
                $(InvalidErrorValue)errorValue : errorValue message.
                _: abort().
            }
        };
        withSelector: #isMidValue addMethod: {
            |$(Value)self :: Boolean |
            match: self ofType: Value withPatterns: #{
                $(SysmelMidValue)midValue : true.
                _: false.
            }
        };
        withSelector: #getMidValue addMethod: {
            |$(Value)self :: MidValue |
            match: self ofType: Value withPatterns: #{
                $(SysmelMidValue)midValue : midValue value.
                _: abort().
            }
        };
        withSelector: #getIntegerValue addMethod: {
            |$(Value)self :: Integer |
            match: self ofType: Value withPatterns: #{
                $(IntegerValue)integerValue : integerValue value.
                _: abort().
            }.
        }.

    TypedValue
        withSelector: #isInvalidErrorValue addMethod: {
            |$(TypedValue)self :: Boolean |
            self value isInvalidErrorValue
        };
        withSelector: #getInvalidErrorValueMessage addMethod: {
            |$(TypedValue)self :: String |
            self value getInvalidErrorValueMessage
        };
        withSelector: #getIntegerValue addMethod: {
            |$(TypedValue)self :: Integer |
            self value getIntegerValue
        }.

    SysmelFunction
        withSelector: #getName addMethod: {
            | $(SysmelFunction) self |
            match:self ofType: SysmelFunction withPatterns: #{
                $(SysmelIntrinsicPrimitive)intrinsic : intrinsic name.
                $(SysmelCompiledFunction)compiled : compiled name.
            }
        }.
    SysmelFunction
        withSelector: #setName: addMethod: {
            | $(SysmelFunction)self $(Symbol) newName :: Void  |
            match:self ofType: SysmelFunction withPatterns: #{
                $(SysmelIntrinsicPrimitive)intrinsic :{
                    intrinsic name: newName
                }.
                $(SysmelCompiledFunction)compiled : {
                    compiled name: newName.
                }
            }
        }.
    $extractArrayFromValue($(Value)value :: Array) := {
        match: value ofType: Value withPatterns: #{
            $(ArrayValue)arrayValue : arrayValue value.
            _: {
                printLine("Not a valid array value").
                abort()
            }
        }.
    }.
    $extractTupleFromValue($(Value)value :: Tuple) := {
        match: value ofType: Value withPatterns: #{
            $(TupleValue)arrayValue : arrayValue value.
            _: {
                printLine("Not a valid tuple value").
                abort()
            }
        }.
    }.
    $extractAssociationFromValue($(Value)value :: Association) := {
        match: value ofType: Value withPatterns: #{
            $(AssociationValue)association : association value.
            _: {
                printLine("Not a valid association value").
                abort()
            }
        }.
    }.
    $isValueWithImmutableDictionaryFromValue($(Value)value :: Boolean) := {
        match: value ofType: Value withPatterns: #{
            $(ImmutableDictionaryValue)dict : true.
            _: false
        }.
    }.
    $extractImmutableDictionaryFromValue($(Value)value :: ImmutableDictionary) := {
        match: value ofType: Value withPatterns: #{
            $(ImmutableDictionaryValue)dict : dict value.
            _: {
                printLine("Not a valid association value").
                abort()
            }
        }.
    }.
    $valueContainsParseTreeFromValue($(Value)value :: Bool) := {
        match: value ofType: Value withPatterns: #{
            $(ParseTreeNodeValue)parseTreeValue : true.
            _: false.
        }.
    }.
    $extractParseTreeNodeFromValue($(Value)value :: ParseTreeNode) := {
        match: value ofType: Value withPatterns: #{
            $(ParseTreeNodeValue)parseTreeValue : parseTreeValue value.
            _: {
                printLine("Not a valid array value").
                abort()
            }
        }.
    }.
    $extractBooleanFromValue($(Value)value :: Boolean) := {
        match: value ofType: Value withPatterns: #{
            $(BooleanValue)booleanValue : booleanValue value.
            _: {
                printLine("Not a valid boolean value").
                abort()
            }
        }.
    }.
    $extractIntegerFromValue($(Value)value :: String) := {
        match: value ofType: Value withPatterns: #{
            $(IntegerValue)integerValue : integerValue value.
            _: {
                printLine("Not a valid string value.").
                abort()
            }
        }.
    }.
    $extractStringFromValue($(Value)value :: String) := {
        match: value ofType: Value withPatterns: #{
            $(StringValue)stringValue : stringValue value.
            _: {
                printLine("Not a valid string value.").
                abort()
            }
        }.
    }.
    $extractSymbolFromValue($(Value)value :: Symbol) := {
        match: value ofType: Value withPatterns: #{
            $(SymbolValue)symbolValue : symbolValue value.
            _: {
                printLine("Not a valid symbol value").
                abort()
            }
        }.
    }.
    $extractTypeFromValue($(Value)value :: SysmelType) := {
        match: value ofType: Value withPatterns: #{
            $(SysmelTypeValue)typeValue : typeValue value.
            _: {
                printLine("Not a valid sysmel type value").
                abort()
            }
        }.
    }.
    $isTypeValue($(Value)value :: Boolean) := {
        match: value ofType: Value withPatterns: #{
            $(SysmelTypeValue)typeValue : true.
            _: false.
        }.
    }.
    $extractBoxFromValue($(Value)value :: SysmelType) := {
        match: value ofType: Value withPatterns: #{
            $(SysmelValueBox)valueBox : valueBox.
            _: {
                printLine("Not a valid sysmel box value").
                abort()
            }
        }.
    }.
    $isValueBoxValue($(Value)value :: Boolean) := {
        match: value ofType: Value withPatterns: #{
            $(SysmelValueBox)typeValue : true.
            _: false.
        }.
    }.
    $extractNamespaceFromValue($(Value)value :: Namespace) := {
        match: value ofType: Value withPatterns: #{
            $(NamespaceValue)namespaceValue : namespaceValue value.
            _: {
                printLine("Not a valid sysmel namespace value").
                abort()
            }
        }.
    }.

    $isNamespaceValue($(Value)value :: Boolean) := {
        match: value ofType: Value withPatterns: #{
            $(NamespaceValue)namespaceValue : true.
            _: false.
        }.
    }.
    $extractFunctionFromValue($(Value)value :: SysmelFunction) := {
        match: value ofType: Value withPatterns: #{
            $(SysmelFunctionValue)functionValue : functionValue value.
            _: {
                printLine("Not a valid function value").
                abort()
            }
        }
    }.
    $isFunctionValue($(Value)value :: Bool) := {
        match: value ofType: Value withPatterns: #{
            $(SysmelFunctionValue)functionValue : true.
            _: false.
        }
    }.
    $sysmelFunctionIsMacro($(SysmelFunction)function :: Boolean) := {
        match: function ofType: SysmelFunction withPatterns: #{
            $(SysmelIntrinsicPrimitive)intrinsic : intrinsic isMacro.
            $(SysmelCompiledFunction)compiled : compiled isMacro.
        }
    }.

    $isRecordType($(SysmelType)type :: Boolean) := {
        match: type ofType: SysmelType withPatterns: #{
            $(SysmelTupleAndRecordType)tupleAndRecord : true.
            _: false.
        }
    }.

    $extractRecordType($(SysmelType)type :: SysmelTupleAndRecordType) := {
        match: type ofType: SysmelType withPatterns: #{
            $(SysmelTupleAndRecordType)tupleAndRecord : tupleAndRecord.
            _: {
                printLine("Not a valid record type.").
                abort()
            }
        }
    }.

    $extractRecordFromValue($(Value)value :: SysmelFunction) := {
        match: value ofType: Value withPatterns: #{
            $(RecordValue)recordValue : recordValue value.
            _: {
                printLine("Not a valid record value").
                abort()
            }
        }
    }.
    $findIndexOfRecordFieldWithName($(SysmelTupleAndRecordType)recordType $(Symbol)fieldName :: Integer) := {
        $fieldCount := recordType fieldNames size.
        $!i := 0. while: (i < fieldCount) do: {
            $recordFieldName := recordType fieldNames at: i.
            if: fieldName == recordFieldName then:{
                return: i
            }.

        } continueWith:(i := i + 1).

        return: 1 negated.
    }.
    $findIndexOfEnumValueWithName($(SysmelEnumType)enumType $(Symbol)valueName :: Integer) := {
        $valueCount := enumType valueCount.
        $!i := 0. while: (i < valueCount) do: {
            $enumValueName := enumType valueNames at: i.
            if: valueName == enumValueName then:{
                return: i
            }.

        } continueWith:(i := i + 1).

        return: 1 negated.
    }
]
}
