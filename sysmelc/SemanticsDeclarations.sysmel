namespace: SysmelC definition: {
public: [
    Record: Namespace withFields: #{
        name: Symbol.
        exportedObjectTable: SymbolHashtable.
        exportedObjectList: OrderedCollection.
    }.
    $MakeNamespaceNamed($(Symbol)name :: Namespace) := Namespace#{
        name: name.
        exportedObjectTable: SymbolHashtable().
        exportedObjectList: OrderedCollection().
    }.

    Record: Module withFields: #{
        name: Symbol.
        globalNamespace: Namespace.
    }.

    ## The different kinds of Environment
    Inductive: Environment withAlternatives: [
        Record: EmptyEnvironment withFields: #{}.
        Record: IntrinsicsEnvironment withFields: #{
            parent: Environment.
            localSymbols: SymbolHashtable.
        }.
        Record: ModuleEnvironment withFields: #{
            parent: Environment.
            module: Module.
        }.
        Record: NamespaceEnvironment withFields: #{
            parent: Environment.
            namespace: Namespace
        }.
        Record: LexicalEnvironment withFields: #{
            parent: Environment.
            localSymbols: SymbolHashtable.
        }.
        Record: FunctionAnalysisEnvironment withFields: #{
            parent: Environment.
        }.
    ].
    
    ## Type
    Record: SysmelTypeCommon withFields: #{
        name: Symbol.
        printingSuffix: String.
        isValueType: Boolean.
        valueAlignment: UInt32.
        valueSize: UInt32.
        heapAlignment: UInt32.
        heapSize: UInt32.
        methodDict: SymbolHashtable.
    }.

    Inductive: SysmelType withAlternatives: [
        Record: SysmelBasicType withFields: #{
            common: SysmelTypeCommon
        }.
        Record: SysmelTupleAndRecordType withFields: #{
            common: SysmelTypeCommon.
            fields: Array.
            fieldNames: Array
        }.
        Record: SysmelEnumType withFields: #{
            common: SysmelTypeCommon.
            valueCount: UInt32.
            values: Array.
            valueNames: Array.
        }.
        Record: SysmelSumType withFields: #{
            common: SysmelTypeCommon.
            alternativeCount: UInt32.
            alternatives: Array.
        }.
        Record: SysmelSimpleFunctionType withFields: #{
            common: SysmelTypeCommon.
            argumentTypes: Array.
            resultType: SysmelType.
        }.
    ].

    ## A value with its different alternatives.
    Inductive: Value withAlternatives: [
        Record: InvalidErrorValue withFields: #{
            message: String
        }.
        Record: NullValue withFields: #{}.
        Record: IntegerValue withFields: #{
            value: Integer
        }.
        Record: FloatValue withFields: #{
            value: Float
        }.
        Record: CharacterValue withFields: #{
            value: Character
        }.
        Record: StringValue withFields: #{
            value: String
        }.
        Record: SymbolValue withFields: #{
            value: Symbol
        }.
        Record: EnvironmentValue withFields: #{
            value: Environment
        }.
        Record: ParseTreeNodeValue withFields: #{
            value: ParseTreeNode
        }.
        Record: NamespaceValue withFields: #{
            value: Namespace
        }.
        Record: ModuleValue withFields: #{
            value: Module
        }.
        Record: SysmelTypeValue withFields: #{
            value: SysmelType
        }.
    ].
    
    ## Typed value
    Record: TypedValue withFields: #{
        value: Value.
        type: SysmelType
    }.

    Value
        withSelector: #isInvalidErrorValue addMethod: {
            |$(Value)self :: Boolean |
            match: self ofType: Value withPatterns: #{
                $(InvalidErrorValue)errorValue : true.
                _: false.
            }
        };
        withSelector: #getInvalidErrorValueMessage addMethod: {
            |$(Value)self :: String |
            match: self ofType: Value withPatterns: #{
                $(InvalidErrorValue)errorValue : errorValue message.
                _: abort().
            }
        }
]
}