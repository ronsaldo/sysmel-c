namespace: SysmelC definition: {
public: [
    Environment
        withSelector: #lookupSymbolRecursively: addMethod: {
            | $(Environment)self $(Symbol)symbol :: Value |
            match: self ofType: Environment withPatterns: #{
                $(EmptyEnvironment) empty : {
                    return: Value(InvalidErrorValue("Symbol not found in environment"))
                }.
                $(IntrinsicsEnvironment)intrinsics : {
                    if: (intrinsics localSymbols includesKey: symbol) then: {
                        intrinsics localSymbols at: symbol
                    }
                    else: {
                        return: (intrinsics parent lookupSymbolRecursively: symbol)
                    }
                }.
                $(ModuleEnvironment)moduleEnv : {
                    return: (moduleEnv parent lookupSymbolRecursively: symbol)
                }.
                $(NamespaceEnvironment)nspaceEnv : {
                    if: (nspaceEnv namespace exportedObjectTable includesKey: symbol) then: {
                        return: (nspaceEnv namespace exportedObjectTable at: symbol)
                    }.
                    return: (nspaceEnv parent lookupSymbolRecursively: symbol)
                }.
                $(LexicalEnvironment)lexical : {
                    if: (lexical localSymbols includesKey: symbol) then: {
                        lexical localSymbols at: symbol
                    }
                    else: {
                        return: (lexical parent lookupSymbolRecursively: symbol)
                    }
                }.
                $(FunctionAnalysisEnvironment)functionalEnv : {
                    if: (functionalEnv localSymbols includesKey: symbol) then: {
                        functionalEnv localSymbols at: symbol
                    }
                    else: {
                        return: (functionalEnv parent lookupSymbolRecursively: symbol)
                    }
                }.
                _: Value(InvalidErrorValue("Symbol not found"))
            }
        };
        withSelector: #lookupNamespace addMethod: {
            | $(Environment)self :: Namespace |
            match: self ofType: Environment withPatterns: #{
                $(EmptyEnvironment) empty : {
                    printLine("Failed to find environment with a namespace").
                    abort()
                }.
                $(IntrinsicsEnvironment)intrinsics : {
                    (intrinsics parent lookupNamespace)
                }.
                $(ModuleEnvironment)moduleEnv : {
                    return: (moduleEnv parent lookupNamespace)
                }.
                $(NamespaceEnvironment)nspaceEnv : {
                    return: nspaceEnv namespace
                }.
                $(LexicalEnvironment)lexical : {
                    lexical parent lookupNamespace
                }.
                $(FunctionAnalysisEnvironment)functionalEnv : {
                    functionalEnv parent lookupNamespace
                }.
                _: Value(InvalidErrorValue("Symbol not found"))
            }
        };
        withSelector: #lookupModule addMethod: {
            | $(Environment)self :: Module |
            match: self ofType: Environment withPatterns: #{
                $(EmptyEnvironment) empty : {
                    printLine("Failed to find environment with the module").
                    abort()
                }.
                $(IntrinsicsEnvironment)intrinsics : {
                    (intrinsics parent lookupModule)
                }.
                $(ModuleEnvironment)moduleEnv : {
                    return: (moduleEnv module)
                }.
                $(NamespaceEnvironment)nspaceEnv : {
                    return: nspaceEnv parent lookupModule
                }.
                $(LexicalEnvironment)lexical : {
                    lexical parent lookupModule
                }.
                $(FunctionAnalysisEnvironment)functionalEnv : {
                    functionalEnv parent lookupModule
                }.
                _: Value(InvalidErrorValue("Symbol not found"))
            }
        };
        withSelector: #addLocalSymbol:withValue: addMethod: {
            | $(Environment)self $(Symbol)symbol $(Value)value :: Void |
            match: self ofType: Environment withPatterns: #{
                $(IntrinsicsEnvironment)intrinsics : {
                    intrinsics localSymbols at: symbol put: value.
                }.
                $(LexicalEnvironment)lexical : {
                    lexical localSymbols at: symbol put: value.
                }.
                $(FunctionAnalysisEnvironment)functionalEnv : {
                    functionalEnv localSymbols at: symbol put: value.
                }.
                _: Value(InvalidErrorValue("Cannot add a local symbol to this environment"))
            }.
            void
        }
]
}
