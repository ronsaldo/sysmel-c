namespace: SysmelC definition: {
public: [

Class: LirModule withFields: #{
    globals: OrderedCollection.
    functions: OrderedCollection.
    midFunctionDictionary: IdentityDictionary.
}.

Class: LirFunction withFields: #{
    name: Symbol.
    instructions: OrderedCollection.
    constants: OrderedCollection.
    ownerModule: LirModule.
    instructionLabelMap: IdentityDictionary.
    instructionTranslationMap: IdentityDictionary.
    stopLabel: Gradual.
}.

Class: LirInstruction withFields: #{
    sourcePosition: SourcePosition.
    index: UInt32
}.

Class: LirArgumentInstruction withSuperclass: LirInstruction fields: #{
    argumentIndex: UInt32.
    name: Symbol.
    type: SysmelType
}.

Class: LirStackFrameConstruction withSuperclass: LirInstruction fields: #{
}.

Class: LirStackFrameDestructionAndReturn withSuperclass: LirInstruction fields: #{
}.

Class: LirAluInstruction withSuperclass: LirInstruction fields: #{
    aluOperation: LirAluOperation.
    operands: Array.
}.

Class: LirReturnValueInstruction withSuperclass: LirInstruction fields: #{
    value: LirInstruction.
}.

Class: LirLabel withSuperclass: LirInstruction fields: #{
    name: Symbol
}.

Class: LirConstant withSuperclass: LirInstruction fields: #{
}.

Class: LirConstantInteger withSuperclass: LirConstant fields: #{
    value: Integer
}.

LirModule
    withSelector: #initialize addMethod: {
        |$(LirModule)self :: Void|
        self globals: OrderedCollection().
        self functions: OrderedCollection().
        self midFunctionDictionary: IdentityDictionary().
    }.
LirFunction
    withSelector: #initializeWithModule: addMethod: {
        |$(LirFunction)self $(LirModule)module :: Void|
        self ownerModule: module.
        self instructions: OrderedCollection().
        self constants: OrderedCollection().
        self instructionLabelMap: IdentityDictionary().
        self instructionTranslationMap: IdentityDictionary().
    }.
LirModule
    withSelector: #compileMidFunction: addMethod: {
        |$(LirModule)self $(MidClosureFunction)midClosure :: Void |

        ## Make sure that a mid function is compiled only once
        if: (self midFunctionDictionary includesKey: midClosure) then: {
            return: (self midFunctionDictionary at: midClosure)
        }.

        $lirFunction := LirFunction().
        ##lirFunction name: midClosure name.
        lirFunction initializeWithModule: self.
        self midFunctionDictionary at: midClosure put: lirFunction.
        self functions add: lirFunction.

        lirFunction constructFromMidClosure: midClosure
    }.

LirFunction
    withSelector: #addInstruction: addMethod: {
        |$(LirModule)self $(LirInstruction)instruction :: Void |
        if: instruction isConstant then: {
            self constants add: instruction
        } else: {
            self instructions add: instruction
        }
    };
    withSelector: #addInstruction:for: addMethod: {
        |$(LirModule)self $(LirInstruction)instruction $(MidValue)midValue :: Void |
        self addInstruction: instruction.
        self instructionTranslationMap at: midValue put: instruction.

    };
    withSelector: #translateConstant: addMethod: {
        |$(LirModule)self $(MidValue)constantOperand :: LirConstant |
        if: (self instructionTranslationMap includesKey: constantOperand) not then: {
            constantOperand compileToLirFor: self
        }.

        return: (self instructionTranslationMap at: constantOperand).
    };   
    withSelector: #translateOperand: addMethod: {
        |$(LirModule)self $(MidValue)operand :: LirInstruction |
        if: operand isConstant then: {
            self translateConstant: operand
        } else: {
            self instructionTranslationMap at: operand
        }
    };
    withSelector: #translateOperands: addMethod: {
        |$(LirModule)self $(Array)operands :: Array |
        $operandCount := operands size.
        $translatedOperands := Array new: operandCount.

        $!i := 0. while: i < operandCount do: {
            translatedOperands at: i put: (self translateOperand: (operands at: i))
        } continueWith: (i := i + 1).
        
        return: translatedOperands
    };
    withSelector: #makeLabel:for: addMethod: {
        |$(LirModule)self $(Symbol)labelName $(MidValue)midValue :: LirLabel |
        $label := LirLabel#{
            name: labelName
        }.
        self instructionLabelMap at: midValue put: label.
        
        label
    };
    withSelector: #getLabelOf: addMethod: {
        |$(LirModule)self $(MidValue)midValue :: LirLabel |
        self instructionLabelMap at: midValue.
    };
    withSelector: #constructFromMidClosure: addMethod: {
        | $(LirModule)self $(MidClosureFunction)midClosure :: Void |

        midClosure ensureInstructionSchedule.
        $schedule := midClosure instructionSchedule.

        ##midClosure dumpSchedule.
        ##midClosure dumpGraph.

        ## First pass: define labels and limits.
        $!i := 0. while: (i < schedule size) do: {
            $midInstruction := schedule at: i.
            midInstruction makeLirLabelFor: self
        } continueWith: (i := i + 1).

        ## Second pass: LIR code generation.
        $!i := 0. while: (i < schedule size) do: {
            $midInstruction := schedule at: i.
            midInstruction compileToLirFor: self
        } continueWith: (i := i + 1).

        self enumerateInstructions.


        ##printLine(midClosure instructionSchedule)
        ##printLine(midClosure)

        self dumpFunction
    };
    withSelector: #enumerateInstructions addMethod: {
        | $(LirModule)self :: Void |
        $instructionCount := self instructions size.
        $!i := 0. while: (i < instructionCount) do: {
            (self instructions at: i) index: i
        } continueWith: (i := i + 1).

        $constantsCount := self constants size.
        $!i := 0. while: (i < constantsCount) do: {
            (self constants at: i) index: instructionCount + i
        } continueWith: (i := i + 1).
    };
    withSelector: #dumpFunction addMethod: {
        | $(LirModule)self :: Void |
        printLine("LirFunction ". self name. "{").
        $!i := 0. while: (i < self instructions size) do: {
            (self instructions at: i) dump.
        } continueWith: (i := i + 1).

        printLine("Constant section:").
        i := 0. while: (i < self constants size) do: {
            (self constants at: i) dump.
        } continueWith: (i := i + 1).
        printLine("}").
    }.

LirInstruction
    withSelector: #isConstant addMethod: {
        | $(LirInstruction)self :: Boolean |
        false
    };
    withSelector: #dump addMethod: {
        | $(LirInstruction)self :: Void |
        printLine("Subclass responsibility ". self class).
    }.

LirConstant
    withSelector: #isConstant addMethod: {
        | $(LirConstant)self :: Boolean |
        true
    };
    withSelector: #dump addMethod: {
        | $(LirInstruction)self :: Void |
        printLine("Subclass responsibility ". self class).
    }.

LirConstantInteger
    withSelector: #dump addMethod: {
        | $(LirInstruction)self :: Void |
        printLine(self index. ":  constantInteger ". self value)
    }.

LirArgumentInstruction
    withSelector: #dump addMethod: {
        | $(LirAluInstruction)self :: Void |
        printLine(self index. ":  ". self name. " arg " . self argumentIndex asInteger . " ")
    }.

LirStackFrameConstruction
    withSelector: #dump addMethod: {
        | $(LirAluInstruction)self :: Void |
        printLine(self index. ":  stack frame construction")
    }.

LirStackFrameDestructionAndReturn
    withSelector: #dump addMethod: {
        | $(LirAluInstruction)self :: Void |
        printLine(self index. ":  stack frame destruction")
    }.
LirReturnValueInstruction
    withSelector: #dump addMethod: {
        | $(LirAluInstruction)self :: Void |
        if: self value isNotNull then: {
            printLine(self index. ":  return value:". self value index)
        } else: {
            printLine(self index. ":  return void")
        }
    }.
LirAluInstruction
    withSelector: #dump addMethod: {
        | $(LirAluInstruction)self :: Void |
        print(self index. ":  Alu". self aluOperation. " [").
        $operandCount := self operands size.
        $!i := 0. while: (i < operandCount) do: {
            $operand := self operands at: i.
            if: operand isNotNull then: {
                print(" ". operand index. " ").
            } else: {
                print(" null ")
            }
        } continueWith: (i := i + 1).
        
        printLine("]")
    }.
LirLabel
    withSelector: #dump addMethod: {
        | $(LirLabel)self :: Void |
        printLine(self index. ":  label ". self name)
    }.

MidValue
    withSelector: #makeLirLabelFor: addMethod: {
        | $(MidValue)self $(LirFunction)lirFunction :: Void |
        ## By default do nothing.
    };
    withSelector: #compileToLirFor: addMethod: {
        | $(MidValue)self $(LirFunction)lirFunction :: Void |
        printLine("subclassResponsibility #compileToLirFor: ". self class).
        abort()
    }.

MidArgument
    withSelector: #compileToLirFor: addMethod: {
        | $(MidValue)self $(LirFunction)lirFunction :: Void |
        $lirArgument := LirArgumentInstruction#{
            sourcePosition: self sourcePosition.
            argumentIndex: self index.
            name: self name.
            type: self type.
        }.

        lirFunction addInstruction: lirArgument for: self
    }.

MidStartNode
    withSelector: #compileToLirFor: addMethod: {
        | $(MidValue)self $(LirFunction)lirFunction :: Void |
        lirFunction addInstruction: LirStackFrameConstruction#{
            sourcePosition: self sourcePosition
        }.
    }.

MidPureCallFunction
    withSelector: #compileToLirFor: addMethod: {
        | $(MidValue)self $(LirFunction)lirFunction :: Void |
        $aluOperation := self functional getLirAluOperation.
        $operands := lirFunction translateOperands: self arguments.

        if: aluOperation ~= 0 then: {
            $aluInstruction := LirAluInstruction#{
                sourcePosition: self sourcePosition.
                aluOperation: aluOperation.
                operands: operands.
            }.
            lirFunction addInstruction: aluInstruction for: self.
        } else: {
            printLine("TODO: Emit Call. ". self functional).
        }
    }.

MidReturn
    withSelector: #compileToLirFor: addMethod: {
        | $(MidValue)self $(LirFunction)lirFunction :: Void |
        $translatedValue := lirFunction translateOperand: self resultValue.
        lirFunction addInstruction: LirReturnValueInstruction#{
            sourcePosition: self sourcePosition.
            value: translatedValue.
        } for: self
    }.

MidStopNode
    withSelector: #makeLirLabelFor: addMethod: {
        | $(MidValue)self $(LirFunction)lirFunction :: Void |
        $label := lirFunction makeLabel: #stop for: self.
        lirFunction stopLabel: label
    };
    withSelector: #compileToLirFor: addMethod: {
        | $(MidValue)self $(LirFunction)lirFunction :: Void |
        lirFunction addInstruction: (lirFunction getLabelOf: self) for: self.
        lirFunction addInstruction: LirStackFrameDestructionAndReturn#{
            sourcePosition: self sourcePosition
        }
    }.

MidConstantInteger
    withSelector: #compileToLirFor: addMethod: {
        | $(MidValue)self $(LirFunction)lirFunction :: Void |
        lirFunction addInstruction: (LirConstantInteger#{
            sourcePosition: self sourcePosition.
            value: self value.
        }) for: self.
    }.
].
}.
