namespace: SysmelC definition: {
public: [
Enum: TokenKind withBaseType: UInt8 values: #{
    NullToken: 0u8.
    EndOfSource:.
    Error:.

    Character:.
    Float:.
    Identifier:.
    Nat:.
    Keyword:.
    MultiKeyword:.
    Operator:.
    String:.
    Symbol:.

    LeftParent:.
    RightParent:.
    LeftBracket:.
    RightBracket:.
    LeftCurlyBracket:.
    RightCurlyBracket:.

    LessThan:.
    GreaterThan:.
    Star:.
    Question:.
    Bang:.
    Dollar:.
    Colon:.
    ColonColon:.
    Bar:.
    Assignment:.
    Semicolon:.
    Comma:.
    Dot:.
    Ellipsis:.
    BindOperator:.
    Quote:.
    QuasiQuote:.
    QuasiUnquote:.
    Splice:.

    ByteArrayStart:.
    DictionaryStart:.
    LiteralArrayStart:.    
}.

Record: ScannedToken withFields: #{
    kind: TokenKind.
    sourcePosition: SourcePosition.
    errorMessage: String
}.

Record: ScannerState withFields: #{
    sourceCode: SourceCode.
    text: String.
    textSize: UInt32.
    position: UInt32.
    line: UInt32.
    column: UInt32.
    isPreviousCR: Boolean
}.

$makeScannerStateForSourceCode($(SourceCode)sourceCode :: ScannerState) 
    := ScannerState#{
        sourceCode: sourceCode.
        text: sourceCode text.
        textSize: sourceCode text size.
        position: 0.
        line: 1.
        column: 1.
        isPreviousCR: false
    }.
].

ScannerState
    withSelector: #atEnd addMethod: {|$(ScannerState)self :: Boolean |
        self position >= self textSize 
    };
    withSelector: #peekAt: addMethod: {|$(ScannerState)self $(UInt32)offset :: Int32 |
        if: (self position + offset) < self textSize
        then: (self text at: self position + offset) asInt32
        else: 1i32 negated
        
    };
    withSelector: #peek addMethod: {|$(ScannerState)self $(UInt32)offset :: Int32 |
        self peekAt: 0u32
    };
    withSelector: #advance addMethod: {|$(ScannerState)self :: Void |
        assert: self atEnd not.
        $c := (self text at: self position) asChar32.
        self position: self position + 1i32.

        
        void
    }.

$skipWhite($(ScannerState)state :: Void) := {
    void
}.

$scanSingleToken($(ScannerState)state :: ScannerToken) := {
    skipWhite(state).

    ScannedToken(TokenKind EndOfSource)
}.

public: [
    $scanSourceCode($(SourceCode)sourceCode :: OrderedCollection) := {
        $list := OrderedCollection().
        $state := makeScannerStateForSourceCode(sourceCode).
        $!scannedToken := ScannedToken(TokenKind NullToken).
        do: {
            scannedToken := scanSingleToken(state).
            list add: scannedToken
        } while: (scannedToken kind ~= TokenKind EndOfSource).

        list
    }
]

$sourceCode := makeSourceCodeForString("  ").
printLine(sourceCode).
$scanResult := scanSourceCode(sourceCode).
printLine(scanResult).
}.


