namespace: SysmelC definition: {
public: [
Enum: TokenKind withBaseType: UInt8 values: #{
    NullToken: 0u8.
    EndOfSource:.
    Error:.

    Character:.
    Float:.
    Identifier:.
    Nat:.
    Keyword:.
    MultiKeyword:.
    Operator:.
    String:.
    Symbol:.

    LeftParent:.
    RightParent:.
    LeftBracket:.
    RightBracket:.
    LeftCurlyBracket:.
    RightCurlyBracket:.

    LessThan:.
    GreaterThan:.
    Star:.
    Question:.
    Bang:.
    Dollar:.
    Colon:.
    ColonColon:.
    Bar:.
    Assignment:.
    Semicolon:.
    Comma:.
    Dot:.
    Ellipsis:.
    BindOperator:.
    Quote:.
    QuasiQuote:.
    QuasiUnquote:.
    Splice:.

    ByteArrayStart:.
    DictionaryStart:.
    LiteralArrayStart:.    
}.

Record: ScannedToken withFields: #{
    kind: TokenKind.
    sourcePosition: SourcePosition.
    errorMessage: String
}.

Record: ScannerState withFields: #{
    sourceCode: SourceCode.
    text: String.
    textSize: UInt32.
    position: UInt32.
    line: UInt32.
    column: UInt32.
    isPreviousCR: Boolean
}.

$makeScannerStateForSourceCode($(SourceCode)sourceCode :: ScannerState) 
    := ScannerState#{
        sourceCode: sourceCode.
        text: sourceCode text.
        textSize: sourceCode text size.
        position: 0.
        line: 1.
        column: 1.
        isPreviousCR: false
    }.
].

ScannerState
    withSelector: #copy addMethod: {|$(ScannerState)self :: ScannerState |
        ScannerState#{
            sourceCode:   self sourceCode.
            text:         self text.
            textSize:     self textSize.
            position:     self position.
            line:         self line.
            column:       self column.
            isPreviousCR: self isPreviousCR.
        }
    };
    withSelector: #atEnd addMethod: {|$(ScannerState)self :: Boolean |
        self position >= self textSize 
    };
    withSelector: #peekAt: addMethod: {|$(ScannerState)self $(UInt32)offset :: Int32 |
        if: (self position + offset) < self textSize
        then: (self text at: self position + offset) asInt32
        else: 1i32 negated
        
    };
    withSelector: #peek addMethod: {|$(ScannerState)self $(UInt32)offset :: Int32 |
        self peekAt: 0u32
    };
    withSelector: #advance addMethod: {|$(ScannerState)self :: Void |
        assert: self atEnd not.
        $c := (self text at: self position) asInt32.
        if: c = '\r'i32 then: {
            self line: self line + 1u32.
            self column: 1u32.
            self isPreviousCR: true
        } else: {
            if: c = '\n'i32 then: {
                if: self isPreviousCR not then: {
                    self line: self line + 1u32.
                    self column: 1u32
                }.
                self isPreviousCR: false
            } else: {
                if: c = '\t'i32 then: {
                    self column: (self column + 4)%4 * 4 + 1.
                    self isPreviousCR: false
                }
                else: {
                    self column: self column + 1.
                    self isPreviousCR: false
                }
            }
        }.

        self position: self position + 1i32.
        void
    };
    withSelector: #advance: addMethod: {|$(ScannerState)self $(UInt32) count :: Void |
        $!i := 0u32.
        while: (i < count) do: {
            self advance
        } continueWith: (i := i + 1u32)
    };
    withSelector: #currentSourcePosition addMethod: {|$(ScannerState)self :: SourcePosition |
        SourcePosition #{
            sourceCode: self sourceCode.
            startIndex: self position.
            endIndex: self position.
            startLine: self line.
            endLine: self line.
            startColumn: self column.
            endColumn: self column.
        }
    };
    withSelector: #makeToken: addMethod: {|$(ScannerState)self $(TokenKind)kind :: Void |
        ScannedToken #{
            kind: kind.
            sourcePosition: self currentSourcePosition.
        }
    };
    withSelector: #makeToken:startingFrom: addMethod: {|$(ScannerState)self $(TokenKind)kind $(ScannerState)previousState :: Void |
        ScannedToken #{
            kind: kind.
            sourcePosition: SourcePosition #{
                sourceCode: self sourceCode.
                startIndex: previousState position.
                endIndex: self position.
                startLine: previousState line.
                endLine: self line.
                startColumn: previousState column.
                endColumn: self column.
            }.
        }
    }.

$isDigit($(UInt32)character :: Boolean)
    := (('0'u32 <= character) && (character <= '9'u32)).

$isIdentifierStart($(UInt32)character :: Boolean)
    := (('A'u32 <= character) && (character <= 'Z'u32)) ||
       (('a'u32 <= character) && (character <= 'z'u32)) ||
       character = '_'u32.

$isIdentifierMiddle($(UInt32)character :: Boolean)
    := isDigit(character) || isIdentifierStart(character).

$skipWhite($(ScannerState)state :: ScannedToken) := {
    $!hasSeenComments := false.
    do: {
        ## Skip whitespaces.
        while: (state atEnd not && (state peek <= ' 'u32)) do: {
            state advance
        }.

        if: (state peek = '#'u32) then: {
            ## Singleline
            if:((state peekAt: 1u32) = '#'u32) then: {
                state advance: 2u32.
                while: (state atEnd not && state peek ~= '\n' && state peek ~= '\r' ) do: {
                    state advance
                }.

                hasSeenComments := true.
            }
            else: {
                ## Multiline
                if: ((state peekAt: 1) = '*'u32) then: {
                    ## TODO: Implement this case.
                }
            }
            
        }

    } while: (hasSeenComments).

    ScannedToken(TokenKind NullToken)
}.

$scanSingleToken($(ScannerState)state :: ScannerToken) := {
    $whiteErrorToken := skipWhite(state).
    if: whiteErrorToken kind ~= TokenKind NullToken then: {
        return: whiteErrorToken
    }.

    if: state atEnd then: {
        return: state makeToken(TokenKind EndOfSource)
    }.

    $initialState := state copy.
    $c := state peek.

    if: isIdentifierStart(c) then: {
        state advance.
        while: (isIdentifierMiddle(state peek)) do: {
            state advance
        }.

        return: (state makeToken: TokenKind Identifier startingFrom: initialState)
    }.

    ScannedToken(TokenKind EndOfSource)
}.

public: [
    $scanSourceCode($(SourceCode)sourceCode :: OrderedCollection) := {
        $list := OrderedCollection().
        $state := makeScannerStateForSourceCode(sourceCode).
        $!scannedToken := ScannedToken(TokenKind NullToken).
        do: {
            scannedToken := scanSingleToken(state).
            list add: scannedToken
        } while: (scannedToken kind ~= TokenKind EndOfSource).

        list
    }
]

$sourceCode := makeSourceCodeForString("  testing testing").
printLine(sourceCode).
$scanResult := scanSourceCode(sourceCode).
printLine(scanResult).
}.


