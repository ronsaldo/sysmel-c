namespace: SysmelC definition: {
public: [
Enum: TokenKind withBaseType: UInt8 values: #{
    NullToken: 0u8.
    EndOfSource:.
    Error:.

    Character:.
    Float:.
    Identifier:.
    Nat:.
    Keyword:.
    MultiKeyword:.
    Operator:.
    String:.
    Symbol:.

    LeftParent:.
    RightParent:.
    LeftBracket:.
    RightBracket:.
    LeftCurlyBracket:.
    RightCurlyBracket:.

    LessThan:.
    GreaterThan:.
    Star:.
    Question:.
    Bang:.
    Dollar:.
    Colon:.
    ColonColon:.
    Bar:.
    Assignment:.
    Semicolon:.
    Comma:.
    Dot:.
    Ellipsis:.
    BindOperator:.
    Quote:.
    QuasiQuote:.
    QuasiUnquote:.
    Splice:.

    ByteArrayStart:.
    ImmutableDictionaryStart:.
    LiteralArrayStart:.    
}.

Record: ScannedToken withFields: #{
    kind: TokenKind.
    sourcePosition: SourcePosition.
    errorMessage: String
}.

Record: ScannerState withFields: #{
    sourceCode: SourceCode.
    text: String.
    textSize: UInt32.
    position: UInt32.
    line: UInt32.
    column: UInt32.
    isPreviousCR: Boolean
}.

$makeScannerStateForSourceCode($(SourceCode)sourceCode :: ScannerState) 
    := ScannerState#{
        sourceCode: sourceCode.
        text: sourceCode text.
        textSize: sourceCode text size.
        position: 0.
        line: 1.
        column: 1.
        isPreviousCR: false
    }.
].

ScannedToken
    withSelector: #getText addMethod: {|$(ScannedToken)self :: String |
        self sourcePosition getText
    }.
ScannerState
    withSelector: #copy addMethod: {|$(ScannerState)self :: ScannerState |
        ScannerState#{
            sourceCode:   self sourceCode.
            text:         self text.
            textSize:     self textSize.
            position:     self position.
            line:         self line.
            column:       self column.
            isPreviousCR: self isPreviousCR.
        }
    };
    withSelector: #restoreFromCopy: addMethod: {|$(ScannerState)self $(ScannerState)copy :: ScannerState |
        self sourceCode:   copy sourceCode.
        self text:         copy text.
        self textSize:     copy textSize.
        self position:     copy position.
        self line:         copy line.
        self column:       copy column.
        self isPreviousCR: copy isPreviousCR.
        self
    };
    withSelector: #atEnd addMethod: {|$(ScannerState)self :: Boolean |
        self position >= self textSize 
    };
    withSelector: #peekAt: addMethod: {|$(ScannerState)self $(UInt32)offset :: Int32 |
        if: (self position + offset) < self textSize
        then: (self text at: self position + offset) asInt32
        else: 1i32 negated
        
    };
    withSelector: #peek addMethod: {|$(ScannerState)self $(UInt32)offset :: Int32 |
        self peekAt: 0u32
    };
    withSelector: #advance addMethod: {|$(ScannerState)self :: Void |
        assert: self atEnd not.
        $c := (self text at: self position) asInt32.
        if: c = '\r'i32 then: {
            self line: self line + 1u32.
            self column: 1u32.
            self isPreviousCR: true
        } else: {
            if: c = '\n'i32 then: {
                if: self isPreviousCR not then: {
                    self line: self line + 1u32.
                    self column: 1u32
                }.
                self isPreviousCR: false
            } else: {
                if: c = '\t'i32 then: {
                    self column: (self column + 4)%4 * 4 + 1.
                    self isPreviousCR: false
                }
                else: {
                    self column: self column + 1.
                    self isPreviousCR: false
                }
            }
        }.

        self position: self position + 1i32.
        void
    };
    withSelector: #advance: addMethod: {|$(ScannerState)self $(UInt32) count :: Void |
        $!i := 0u32.
        while: (i < count) do: {
            self advance
        } continueWith: (i := i + 1u32)
    };
    withSelector: #currentSourcePosition addMethod: {|$(ScannerState)self :: SourcePosition |
        SourcePosition #{
            sourceCode: self sourceCode.
            startIndex: self position.
            endIndex: self position.
            startLine: self line.
            endLine: self line.
            startColumn: self column.
            endColumn: self column.
        }
    };
    withSelector: #makeToken: addMethod: {|$(ScannerState)self $(TokenKind)kind :: Void |
        ScannedToken #{
            kind: kind.
            sourcePosition: self currentSourcePosition.
        }
    };
    withSelector: #makeToken:startingFrom: addMethod: {|$(ScannerState)self $(TokenKind)kind $(ScannerState)previousState :: Void |
        ScannedToken #{
            kind: kind.
            sourcePosition: SourcePosition #{
                sourceCode: self sourceCode.
                startIndex: previousState position.
                endIndex: self position.
                startLine: previousState line.
                endLine: self line.
                startColumn: previousState column.
                endColumn: self column.
            }.
        }
    };
    withSelector: #makeErrorToken:startingFrom: addMethod: {|$(ScannerState)self $(String)errorMessage $(ScannerState)previousState :: Void |
        ScannedToken #{
            kind: TokenKind Error.
            sourcePosition: SourcePosition #{
                sourceCode: self sourceCode.
                startIndex: previousState position.
                endIndex: self position.
                startLine: previousState line.
                endLine: self line.
                startColumn: previousState column.
                endColumn: self column.
            }.
            errorMessage: errorMessage.
        }
    }.
$isDigit($(UInt32)character :: Boolean)
    := (('0'u32 <= character) && (character <= '9'u32)).

$isIdentifierStart($(UInt32)character :: Boolean)
    := (('A'u32 <= character) && (character <= 'Z'u32)) ||
       (('a'u32 <= character) && (character <= 'z'u32)) ||
       (character = '_'u32).

$isIdentifierMiddle($(UInt32)character :: Boolean)
    := isDigit(character) || isIdentifierStart(character).

$isOperatorCharacter($(UInt32)character :: Boolean) := {
    $charset := "+-/\\*~<>=@%|&?!^".
    $!i := 0u32.
    while: (i < charset size) do:{
        if: (charset at: i) asUInt32 = character then: {
            return: true
        }.
    } continueWith: (i := i + 1u32).

    return: false
}.

$skipWhite($(ScannerState)state :: ScannedToken) := {
    $!hasSeenComments := false.
    do: {
        ## Skip whitespaces.
        while: (state atEnd not && (state peek <= ' 'u32)) do: {
            state advance
        }.

        if: (state peek = '#'u32) then: {
            ## Singleline
            if:((state peekAt: 1u32) = '#'u32) then: {
                state advance: 2u32.
                while: (state atEnd not && (state peek ~= '\n') && (state peek ~= '\r') ) do: {
                    state advance
                }.

                hasSeenComments := true.
            }
            else: {
                ## Multiline
                if: ((state peekAt: 1) = '*'u32) then: {
                    $startingState := state copy.
                    state advance: 2u32.
                    $!hasCommentEnd := false.
                    while: state atEnd not && hasCommentEnd not do: {
                        hasCommentEnd := (state peek = '*'u32) && ((state peekAt: 1) = '#'u32).

                        if:(hasCommentEnd) then: {
                            state advance: 2
                        }
                        else: {
                            state advance.
                        }
                    }.
                    if: hasCommentEnd then: {
                        hasSeenComments := true
                    } else: {
                        return: (state makeErrorToken: "Incomplete multiline comment." startingFrom: startingState)
                    }
                }
            }
            
        }

    } while: (hasSeenComments && state atEnd not).

    ScannedToken(TokenKind NullToken)
}.

$scanAdvanceKeyword($(ScannerState)state :: Boolean) := {
    if: isIdentifierStart(state peek) not then: {
        return: false
    }.

    $initialState := state copy.
    while: (isIdentifierMiddle(state peek)) do: {
        state advance
    }.

    if: (state peek = ':'i32) then: {
        state advance.
        true
    } else: {
        state restoreFromCopy: initialState.
        false
    }
}.

$scanSingleToken($(ScannerState)state :: ScannerToken) := {
    $whiteErrorToken := skipWhite(state).
    if: whiteErrorToken kind ~= TokenKind NullToken then: {
        return: whiteErrorToken
    }.

    if: state atEnd then: {
        return: (state makeToken: TokenKind EndOfSource)
    }.

    $initialState := state copy.
    $c := state peek.

    ## Identifiers and keywords
    if: isIdentifierStart(c) then: {
        state advance.
        while: (isIdentifierMiddle(state peek)) do: {
            state advance
        }.

        if: state peek = ':'u32 then: {
            state advance.

            $!isMultiKeyword := false.
            $!hasAdvanced := true.
            while: (hasAdvanced) do: {
                hasAdvanced := scanAdvanceKeyword(state).
                isMultiKeyword := isMultiKeyword || hasAdvanced
            }.

            if: isMultiKeyword then: {
                return: (state makeToken: TokenKind MultiKeyword startingFrom: initialState)
            }
            else: {
                return: (state makeToken: TokenKind Keyword startingFrom: initialState)
            }
        }.
        return: (state makeToken: TokenKind Identifier startingFrom: initialState)
    }.

    ## Numbers
    if: isDigit(c) then: {
        while: (isDigit(state peek)) do: {
            state advance
        }.

        if: state peek = 'r'u32 then: {
            state advance.

            while: (isIdentifierMiddle(state peek)) do: {
                state advance
            }.
            return: (state makeToken: TokenKind Nat startingFrom: initialState)
        }.

        if: ((state peek = '.'u32) && (isDigit(state peekAt: 1))) then: {
            state advance.
            while: (isDigit(state peek)) do: {
                state advance
            }.

            if: (state peek = 'e'u32) || (state peek = 'E'u32) then: {
                if: (isDigit(state peek)) || 
                (((state peek = '-'u32) || (state peek = '+'u32))
                && (isDigit(state peekAt: 1u32))) then: {
                    state advance: 2u32
                    while: (isDigit(state peek)) do: {
                        state advance
                    }.
                }
            }.

            return: (state makeToken: TokenKind Float startingFrom: initialState)    
        }.

        return: (state makeToken: TokenKind Nat startingFrom: initialState)
    }.

    ## Symbols
    if: c = '#'u32 then: {
        $c1 := state peekAt: 1.
        if: (isIdentifierStart(c1)) then: {
            state advance.
            while: isIdentifierMiddle(state peek) do:{
                state advance
            }.

            if: state peek = ':'u32 then: {
                state advance.

                $!isMultiKeyword := false.
                $!hasAdvanced := true.
                while: (hasAdvanced) do: {
                    hasAdvanced := scanAdvanceKeyword(state).
                    isMultiKeyword := isMultiKeyword || hasAdvanced
                }.

                if: isMultiKeyword then: {
                    return: (state makeToken: TokenKind Symbol startingFrom: initialState)
                }
                else: {
                    return: (state makeToken: TokenKind Symbol startingFrom: initialState)
                }
            }.

            return: (state makeToken: TokenKind Symbol startingFrom: initialState)
        }.

        if: isOperatorCharacter(c1) then: {
            state advance.
            while: (isOperatorCharacter(state peek)) do: {
                state advance
            }.
            return: (state makeToken: TokenKind Symbol startingFrom: initialState)
        }.

        if: c1 = '"'u32 then: {
            state advance: 2.
            while: (state atEnd not && (state peek ~= '"'u32)) do: {
                if: (state peek = '\\') && ((state peekAt: 1) > 0u32) then: {
                    state advance: 2.
                }
                else: {
                    state advance.
                }.
            }.

            if: state peek ~= '"' then: {
                return: (state makeErrorToken: "Incomplete string" startingFrom: initialState)
            }.

            state advance.
            return: (state makeToken: TokenKind Symbol startingFrom: initialState)
        }.
        if: c1 = '['u32 then: {
            state advance: 2.
            return: (state makeToken: TokenKind ByteArrayStart startingFrom: initialState)
        }.
        if: c1 = '{'u32 then: {
            state advance: 2.
            return: (state makeToken: TokenKind ImmutableDictionaryStart startingFrom: initialState)
        }.
        if: c1 = '('u32 then: {
            state advance: 2.
            return: (state makeToken: TokenKind LiteralArrayStart startingFrom: initialState)
        }.
    }.

    ## Strings
    if: c = '"'u32 then: {
        state advance.
        while: (state atEnd not && (state peek ~= '"'u32)) do: {
            if: (state peek = '\\') && ((state peekAt: 1) > 0u32) then: {
                state advance: 2.
            }
            else: {
                state advance.
            }.
        }.

        if: state peek ~= '"' then: {
            return: (state makeErrorToken: "Incomplete string literal" startingFrom: initialState)
        }.

        state advance.
        return: (state makeToken: TokenKind String startingFrom: initialState)
    }.

    ## Characters
    if: c = '\''u32 then: {
        state advance.
        while: (state atEnd not && (state peek ~= '\''u32)) do: {
            if: (state peek = '\\') && ((state peekAt: 1) > 0u32) then: {
                state advance: 2.
            }
            else: {
                state advance.
            }.
        }.

        if: state peek ~= '\'' then: {
            return: (state makeErrorToken: "Incomplete character literal" startingFrom: initialState)
        }.

        state advance.
        return: (state makeToken: TokenKind Character startingFrom: initialState)
    }.

    if: c = '('u32 then: {
        state advance.
        return: (state makeToken: TokenKind LeftParent startingFrom: initialState)
    }.
    if: c = ')'u32 then: {
        state advance.
        return: (state makeToken: TokenKind RightParent startingFrom: initialState)
    }.
    if: c = '['u32 then: {
        state advance.
        return: (state makeToken: TokenKind LeftBracket startingFrom: initialState)
    }.
    if: c = ']'u32 then: {
        state advance.
        return: (state makeToken: TokenKind RightBracket startingFrom: initialState)
    }.
    if: c = '{'u32 then: {
        state advance.
        return: (state makeToken: TokenKind LeftCurlyBracket startingFrom: initialState)
    }.
    if: c = '}'u32 then: {
        state advance.
        return: (state makeToken: TokenKind RightCurlyBracket startingFrom: initialState)
    }.
    if: c = ';'u32 then: {
        state advance.
        return: (state makeToken: TokenKind Semicolon startingFrom: initialState)
    }.
    if: c = ','u32 then: {
        state advance.
        return: (state makeToken: TokenKind Comma startingFrom: initialState)
    }.
    if: c = '.'u32 then: {
        state advance.
        if: ((state peek = '.'u32) && ((state peekAt: 1) = '.'u32)) then: {
            state advance: 2.
            return: (state makeToken: TokenKind Ellipsis startingFrom: initialState)
        }.
        return: (state makeToken: TokenKind Dot startingFrom: initialState)
    }.
    if: c = ':'u32 then: {
        state advance.
        if: (state peek = ':'u32) then: {
            state advance.
            return: (state makeToken: TokenKind ColonColon startingFrom: initialState)
        }.
        if: (state peek = '='u32) then: {
            state advance.
            return: (state makeToken: TokenKind Assignment startingFrom: initialState)
        }.
        return: (state makeToken: TokenKind Colon startingFrom: initialState)
    }.
    if: c = '$'u32 then: {
        state advance.
        return: (state makeToken: TokenKind Dollar startingFrom: initialState)
    }.
    if: c = '`'u32 then: {
        if: (state peekAt: 1) = '\''u32 then: {
            state advance: 2.
            return: (state makeToken: TokenKind Quote startingFrom: initialState)
        }.
        if: (state peekAt: 1) = '`'u32 then: {
            state advance: 2.
            return: (state makeToken: TokenKind QuasiQuote startingFrom: initialState)
        }.
        if: (state peekAt: 1) = ','u32 then: {
            state advance: 2.
            return: (state makeToken: TokenKind QuasiUnquote startingFrom: initialState)
        }.
        if: (state peekAt: 1) = '@'u32 then: {
            state advance: 2.
            return: (state makeToken: TokenKind Splice startingFrom: initialState)
        }.
    }.
    if: c = '|'u32 then: {
        state advance.
        if: isOperatorCharacter(state peek) then: {
            while: isOperatorCharacter(state peek) do: {
                state advance
            }.

            return: (state makeToken: TokenKind Operator startingFrom: initialState)
        }.
        return: (state makeToken: TokenKind Bar startingFrom: initialState)
    }.
    if: isOperatorCharacter(c) then: {
        state advance.

        if: isOperatorCharacter(state peek) not then: {
            if: c = '<'u32 then: {
                return: (state makeToken: TokenKind LessThan startingFrom: initialState)
            }.
            if: c = '>'u32 then: {
                return: (state makeToken: TokenKind GreaterThan startingFrom: initialState)
            }.
            if: c = '*'u32 then: {
                return: (state makeToken: TokenKind Star startingFrom: initialState)
            }.
            if: c = '!'u32 then: {
                return: (state makeToken: TokenKind Bang startingFrom: initialState)
            }.
        }.

        while: isOperatorCharacter(state peek) do: {
            state advance
        }.

        return: (state makeToken: TokenKind Operator startingFrom: initialState)
    }.

    if: state atEnd then: {
        return: ScannedToken(TokenKind EndOfSource)
    }
    else: {
        state advance.
        return: (state makeErrorToken: "Unknown character." startingFrom: initialState)
    }
    
}.

public: [
    $scanSourceCode($(SourceCode)sourceCode :: Array) := {
        $list := OrderedCollection().
        $state := makeScannerStateForSourceCode(sourceCode).
        $!scannedToken := ScannedToken(TokenKind NullToken).
        do: {
            scannedToken := scanSingleToken(state).
            list add: scannedToken
        } while: (scannedToken kind ~= TokenKind EndOfSource).

        list asArray
    }
]

#*
$sourceCode := makeSourceCodeForString("
     multi:keyword: keyword: identifier 42 42.5
     #symbol #symbol: #symbol:with: #+
     #\"Hello World\" #[1 . 2] #{} \"Hello String\" 'A' < $!a
").

##printLine(sourceCode).
$scanResult := scanSourceCode(sourceCode).
##printLine(scanResult size . " " .  scanResult).
*#
}.


