namespace: SysmelC definition: {
public: [
Enum: TokenKinds withBaseType: UInt8 values: #{
    NullToken: 0u8.
    EndOfSource:.
    Error:.

    Character:.
    Float:.
    Identifier:.
    Nat:.
    Keyword:.
    MultiKeyword:.
    Operator:.
    String:.
    Symbol:.

    LeftParent:.
    RightParent:.
    LeftBracket:.
    RightBracket:.
    LeftCurlyBracket:.
    RightCurlyBracket:.

    LessThan:.
    GreaterThan:.
    Star:.
    Question:.
    Bang:.
    Dollar:.
    Colon:.
    ColonColon:.
    Bar:.
    Assignment:.
    Semicolon:.
    Comma:.
    Dot:.
    Ellipsis:.
    BindOperator:.
    Quote:.
    QuasiQuote:.
    QuasiUnquote:.
    Splice:.

    ByteArrayStart:.
    DictionaryStart:.
    LiteralArrayStart:.    
}.

Record: ScannerState withFields: #{
    sourceCode: SourceCode.
    text: String.
    textSize: UInt32.
    position: UInt32.
    line: UInt32.
    column: UInt32.
    isPreviousCR: Boolean
}.
].

$makeScannerStateForSourceCode($(SourceCode)sourceCode :: ScannerState) 
    := ScannerState#{
        sourceCode: sourceCode.
        text: sourceCode text.
        textSize: sourceCode text size.
        position: 0.
        line: 1.
        column: 1.
        isPreviousCR: false}.

ScannerState
    withSelector: #atEnd addMethod: {|$(ScannerState)self :: Boolean |
        self position >= self textSize 
    };
    withSelector: #peekAt: addMethod: {|$(ScannerState)self $(UInt32)offset :: Int32 |
        ##assert: (self position + offset) < self textSize.
        (self text at: self position + offset) asInt32
    };
    withSelector: #peek addMethod: {|$(ScannerState)self $(UInt32)offset :: Int32 |
        self peekAt: 0u32
    }
}.

printLine(SysmelC ScannerState)
